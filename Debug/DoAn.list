
DoAn.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d28  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08001e34  08001e34  00011e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001e58  08001e58  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08001e58  08001e58  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001e58  08001e58  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001e58  08001e58  00011e58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001e5c  08001e5c  00011e5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08001e60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  20000018  08001e78  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000040  08001e78  00020040  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003191  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000f3d  00000000  00000000  000231d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003f0  00000000  00000000  00024110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000380  00000000  00000000  00024500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000155cc  00000000  00000000  00024880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004a53  00000000  00000000  00039e4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00079a0f  00000000  00000000  0003e89f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b82ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000dbc  00000000  00000000  000b8304  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	08001e1c 	.word	0x08001e1c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	08001e1c 	.word	0x08001e1c

0800014c <quetbanphim>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
/* USER CODE BEGIN PFP */
void quetbanphim()
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0

	 uint32_t current_time = HAL_GetTick(); // Lấy thời gian hiện tại (ms)
 8000152:	f000 ff87 	bl	8001064 <HAL_GetTick>
 8000156:	6078      	str	r0, [r7, #4]

	    // Quét cột thứ nhất
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0); // Kéo cột 1 xuống mức thấp
 8000158:	2200      	movs	r2, #0
 800015a:	2101      	movs	r1, #1
 800015c:	48a1      	ldr	r0, [pc, #644]	; (80003e4 <quetbanphim+0x298>)
 800015e:	f001 fa24 	bl	80015aa <HAL_GPIO_WritePin>
	    if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == 0) // Nhấn phím "1"
 8000162:	2108      	movs	r1, #8
 8000164:	489f      	ldr	r0, [pc, #636]	; (80003e4 <quetbanphim+0x298>)
 8000166:	f001 fa09 	bl	800157c <HAL_GPIO_ReadPin>
 800016a:	4603      	mov	r3, r0
 800016c:	2b00      	cmp	r3, #0
 800016e:	d140      	bne.n	80001f2 <quetbanphim+0xa6>
	    {
	        while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == 0) {} // Chờ thả phím
 8000170:	bf00      	nop
 8000172:	2108      	movs	r1, #8
 8000174:	489b      	ldr	r0, [pc, #620]	; (80003e4 <quetbanphim+0x298>)
 8000176:	f001 fa01 	bl	800157c <HAL_GPIO_ReadPin>
 800017a:	4603      	mov	r3, r0
 800017c:	2b00      	cmp	r3, #0
 800017e:	d0f8      	beq.n	8000172 <quetbanphim+0x26>

	        if (last_key == 1) // Nếu phím trước đó cũng là "1"
 8000180:	4b99      	ldr	r3, [pc, #612]	; (80003e8 <quetbanphim+0x29c>)
 8000182:	781b      	ldrb	r3, [r3, #0]
 8000184:	2b01      	cmp	r3, #1
 8000186:	d11e      	bne.n	80001c6 <quetbanphim+0x7a>
	        {
	            // Kiểm tra thời gian giữa hai lần nhấn
	            if ((current_time - last_key_time) <= 500) // Nếu trong vòng 5s
 8000188:	4b98      	ldr	r3, [pc, #608]	; (80003ec <quetbanphim+0x2a0>)
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	687a      	ldr	r2, [r7, #4]
 800018e:	1ad3      	subs	r3, r2, r3
 8000190:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000194:	d806      	bhi.n	80001a4 <quetbanphim+0x58>
	            {
	                var[dem-1] = 10; // Gán "A" vào var[0]
 8000196:	4b96      	ldr	r3, [pc, #600]	; (80003f0 <quetbanphim+0x2a4>)
 8000198:	781b      	ldrb	r3, [r3, #0]
 800019a:	3b01      	subs	r3, #1
 800019c:	4a95      	ldr	r2, [pc, #596]	; (80003f4 <quetbanphim+0x2a8>)
 800019e:	210a      	movs	r1, #10
 80001a0:	54d1      	strb	r1, [r2, r3]
 80001a2:	e020      	b.n	80001e6 <quetbanphim+0x9a>
//	                dem++;     // Đặt vị trí tiếp theo là var[1]
	            }
	            else // Nếu cách nhau > 5s
	            {
	                if (dem < 4)
 80001a4:	4b92      	ldr	r3, [pc, #584]	; (80003f0 <quetbanphim+0x2a4>)
 80001a6:	781b      	ldrb	r3, [r3, #0]
 80001a8:	2b03      	cmp	r3, #3
 80001aa:	d81c      	bhi.n	80001e6 <quetbanphim+0x9a>
	                {
	                    var[dem] = 1; // Gán giá trị "1"
 80001ac:	4b90      	ldr	r3, [pc, #576]	; (80003f0 <quetbanphim+0x2a4>)
 80001ae:	781b      	ldrb	r3, [r3, #0]
 80001b0:	461a      	mov	r2, r3
 80001b2:	4b90      	ldr	r3, [pc, #576]	; (80003f4 <quetbanphim+0x2a8>)
 80001b4:	2101      	movs	r1, #1
 80001b6:	5499      	strb	r1, [r3, r2]
	                    dem++;
 80001b8:	4b8d      	ldr	r3, [pc, #564]	; (80003f0 <quetbanphim+0x2a4>)
 80001ba:	781b      	ldrb	r3, [r3, #0]
 80001bc:	3301      	adds	r3, #1
 80001be:	b2da      	uxtb	r2, r3
 80001c0:	4b8b      	ldr	r3, [pc, #556]	; (80003f0 <quetbanphim+0x2a4>)
 80001c2:	701a      	strb	r2, [r3, #0]
 80001c4:	e00f      	b.n	80001e6 <quetbanphim+0x9a>
	                }
	            }
	        }
	        else // Nếu đây là lần nhấn đầu tiên
	        {
	            if (dem < 4)
 80001c6:	4b8a      	ldr	r3, [pc, #552]	; (80003f0 <quetbanphim+0x2a4>)
 80001c8:	781b      	ldrb	r3, [r3, #0]
 80001ca:	2b03      	cmp	r3, #3
 80001cc:	d80b      	bhi.n	80001e6 <quetbanphim+0x9a>
	            {
	                var[dem] = 1; // Gán giá trị "1"
 80001ce:	4b88      	ldr	r3, [pc, #544]	; (80003f0 <quetbanphim+0x2a4>)
 80001d0:	781b      	ldrb	r3, [r3, #0]
 80001d2:	461a      	mov	r2, r3
 80001d4:	4b87      	ldr	r3, [pc, #540]	; (80003f4 <quetbanphim+0x2a8>)
 80001d6:	2101      	movs	r1, #1
 80001d8:	5499      	strb	r1, [r3, r2]
	                dem++;
 80001da:	4b85      	ldr	r3, [pc, #532]	; (80003f0 <quetbanphim+0x2a4>)
 80001dc:	781b      	ldrb	r3, [r3, #0]
 80001de:	3301      	adds	r3, #1
 80001e0:	b2da      	uxtb	r2, r3
 80001e2:	4b83      	ldr	r3, [pc, #524]	; (80003f0 <quetbanphim+0x2a4>)
 80001e4:	701a      	strb	r2, [r3, #0]
	            }
	        }

	        last_key = 1;           // Cập nhật phím vừa nhấn
 80001e6:	4b80      	ldr	r3, [pc, #512]	; (80003e8 <quetbanphim+0x29c>)
 80001e8:	2201      	movs	r2, #1
 80001ea:	701a      	strb	r2, [r3, #0]
	        last_key_time = current_time; // Cập nhật thời gian nhấn
 80001ec:	4a7f      	ldr	r2, [pc, #508]	; (80003ec <quetbanphim+0x2a0>)
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	6013      	str	r3, [r2, #0]
	    }
	if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_4)==0)                // nhan phim 4
 80001f2:	2110      	movs	r1, #16
 80001f4:	487b      	ldr	r0, [pc, #492]	; (80003e4 <quetbanphim+0x298>)
 80001f6:	f001 f9c1 	bl	800157c <HAL_GPIO_ReadPin>
 80001fa:	4603      	mov	r3, r0
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d140      	bne.n	8000282 <quetbanphim+0x136>
		{
			while(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_4)==0){}
 8000200:	bf00      	nop
 8000202:	2110      	movs	r1, #16
 8000204:	4877      	ldr	r0, [pc, #476]	; (80003e4 <quetbanphim+0x298>)
 8000206:	f001 f9b9 	bl	800157c <HAL_GPIO_ReadPin>
 800020a:	4603      	mov	r3, r0
 800020c:	2b00      	cmp	r3, #0
 800020e:	d0f8      	beq.n	8000202 <quetbanphim+0xb6>
		    if (last_key == 4)
 8000210:	4b75      	ldr	r3, [pc, #468]	; (80003e8 <quetbanphim+0x29c>)
 8000212:	781b      	ldrb	r3, [r3, #0]
 8000214:	2b04      	cmp	r3, #4
 8000216:	d11e      	bne.n	8000256 <quetbanphim+0x10a>
					        {
					            if ((current_time - last_key_time) <= 500)
 8000218:	4b74      	ldr	r3, [pc, #464]	; (80003ec <quetbanphim+0x2a0>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	687a      	ldr	r2, [r7, #4]
 800021e:	1ad3      	subs	r3, r2, r3
 8000220:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000224:	d806      	bhi.n	8000234 <quetbanphim+0xe8>
					            {
					                var[dem-1] = 13;
 8000226:	4b72      	ldr	r3, [pc, #456]	; (80003f0 <quetbanphim+0x2a4>)
 8000228:	781b      	ldrb	r3, [r3, #0]
 800022a:	3b01      	subs	r3, #1
 800022c:	4a71      	ldr	r2, [pc, #452]	; (80003f4 <quetbanphim+0x2a8>)
 800022e:	210d      	movs	r1, #13
 8000230:	54d1      	strb	r1, [r2, r3]
 8000232:	e020      	b.n	8000276 <quetbanphim+0x12a>
				//	                dem++;     // Đặt vị trí tiếp theo là var[1]
					            }
					            else
					            {
					                if (dem < 4)
 8000234:	4b6e      	ldr	r3, [pc, #440]	; (80003f0 <quetbanphim+0x2a4>)
 8000236:	781b      	ldrb	r3, [r3, #0]
 8000238:	2b03      	cmp	r3, #3
 800023a:	d81c      	bhi.n	8000276 <quetbanphim+0x12a>
					                {
					                    var[dem] = 4;
 800023c:	4b6c      	ldr	r3, [pc, #432]	; (80003f0 <quetbanphim+0x2a4>)
 800023e:	781b      	ldrb	r3, [r3, #0]
 8000240:	461a      	mov	r2, r3
 8000242:	4b6c      	ldr	r3, [pc, #432]	; (80003f4 <quetbanphim+0x2a8>)
 8000244:	2104      	movs	r1, #4
 8000246:	5499      	strb	r1, [r3, r2]
					                    dem++;
 8000248:	4b69      	ldr	r3, [pc, #420]	; (80003f0 <quetbanphim+0x2a4>)
 800024a:	781b      	ldrb	r3, [r3, #0]
 800024c:	3301      	adds	r3, #1
 800024e:	b2da      	uxtb	r2, r3
 8000250:	4b67      	ldr	r3, [pc, #412]	; (80003f0 <quetbanphim+0x2a4>)
 8000252:	701a      	strb	r2, [r3, #0]
 8000254:	e00f      	b.n	8000276 <quetbanphim+0x12a>
					                }
					            }
					        }
					        else
					        {
					            if (dem < 4)
 8000256:	4b66      	ldr	r3, [pc, #408]	; (80003f0 <quetbanphim+0x2a4>)
 8000258:	781b      	ldrb	r3, [r3, #0]
 800025a:	2b03      	cmp	r3, #3
 800025c:	d80b      	bhi.n	8000276 <quetbanphim+0x12a>
					            {
					                var[dem] = 4;
 800025e:	4b64      	ldr	r3, [pc, #400]	; (80003f0 <quetbanphim+0x2a4>)
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	461a      	mov	r2, r3
 8000264:	4b63      	ldr	r3, [pc, #396]	; (80003f4 <quetbanphim+0x2a8>)
 8000266:	2104      	movs	r1, #4
 8000268:	5499      	strb	r1, [r3, r2]
					                dem++;
 800026a:	4b61      	ldr	r3, [pc, #388]	; (80003f0 <quetbanphim+0x2a4>)
 800026c:	781b      	ldrb	r3, [r3, #0]
 800026e:	3301      	adds	r3, #1
 8000270:	b2da      	uxtb	r2, r3
 8000272:	4b5f      	ldr	r3, [pc, #380]	; (80003f0 <quetbanphim+0x2a4>)
 8000274:	701a      	strb	r2, [r3, #0]
					            }
					        }

					        last_key = 4;
 8000276:	4b5c      	ldr	r3, [pc, #368]	; (80003e8 <quetbanphim+0x29c>)
 8000278:	2204      	movs	r2, #4
 800027a:	701a      	strb	r2, [r3, #0]
					        last_key_time = current_time;
 800027c:	4a5b      	ldr	r2, [pc, #364]	; (80003ec <quetbanphim+0x2a0>)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	6013      	str	r3, [r2, #0]
					    }


	if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_5)==0)                // nhan phim 7
 8000282:	2120      	movs	r1, #32
 8000284:	4857      	ldr	r0, [pc, #348]	; (80003e4 <quetbanphim+0x298>)
 8000286:	f001 f979 	bl	800157c <HAL_GPIO_ReadPin>
 800028a:	4603      	mov	r3, r0
 800028c:	2b00      	cmp	r3, #0
 800028e:	d117      	bne.n	80002c0 <quetbanphim+0x174>
		{
			while(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_5)==0){}
 8000290:	bf00      	nop
 8000292:	2120      	movs	r1, #32
 8000294:	4853      	ldr	r0, [pc, #332]	; (80003e4 <quetbanphim+0x298>)
 8000296:	f001 f971 	bl	800157c <HAL_GPIO_ReadPin>
 800029a:	4603      	mov	r3, r0
 800029c:	2b00      	cmp	r3, #0
 800029e:	d0f8      	beq.n	8000292 <quetbanphim+0x146>
			if(dem<4)
 80002a0:	4b53      	ldr	r3, [pc, #332]	; (80003f0 <quetbanphim+0x2a4>)
 80002a2:	781b      	ldrb	r3, [r3, #0]
 80002a4:	2b03      	cmp	r3, #3
 80002a6:	d80b      	bhi.n	80002c0 <quetbanphim+0x174>
			{
				var[dem] = 7;
 80002a8:	4b51      	ldr	r3, [pc, #324]	; (80003f0 <quetbanphim+0x2a4>)
 80002aa:	781b      	ldrb	r3, [r3, #0]
 80002ac:	461a      	mov	r2, r3
 80002ae:	4b51      	ldr	r3, [pc, #324]	; (80003f4 <quetbanphim+0x2a8>)
 80002b0:	2107      	movs	r1, #7
 80002b2:	5499      	strb	r1, [r3, r2]
				dem++;
 80002b4:	4b4e      	ldr	r3, [pc, #312]	; (80003f0 <quetbanphim+0x2a4>)
 80002b6:	781b      	ldrb	r3, [r3, #0]
 80002b8:	3301      	adds	r3, #1
 80002ba:	b2da      	uxtb	r2, r3
 80002bc:	4b4c      	ldr	r3, [pc, #304]	; (80003f0 <quetbanphim+0x2a4>)
 80002be:	701a      	strb	r2, [r3, #0]
			}
		}
	if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_6)==0)                // nhan phim * hay phim xoa
 80002c0:	2140      	movs	r1, #64	; 0x40
 80002c2:	4848      	ldr	r0, [pc, #288]	; (80003e4 <quetbanphim+0x298>)
 80002c4:	f001 f95a 	bl	800157c <HAL_GPIO_ReadPin>
 80002c8:	4603      	mov	r3, r0
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d117      	bne.n	80002fe <quetbanphim+0x1b2>
		{
			while(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_6)==0){}
 80002ce:	bf00      	nop
 80002d0:	2140      	movs	r1, #64	; 0x40
 80002d2:	4844      	ldr	r0, [pc, #272]	; (80003e4 <quetbanphim+0x298>)
 80002d4:	f001 f952 	bl	800157c <HAL_GPIO_ReadPin>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d0f8      	beq.n	80002d0 <quetbanphim+0x184>
			if(dem>0)
 80002de:	4b44      	ldr	r3, [pc, #272]	; (80003f0 <quetbanphim+0x2a4>)
 80002e0:	781b      	ldrb	r3, [r3, #0]
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d00b      	beq.n	80002fe <quetbanphim+0x1b2>
			{
					dem--;
 80002e6:	4b42      	ldr	r3, [pc, #264]	; (80003f0 <quetbanphim+0x2a4>)
 80002e8:	781b      	ldrb	r3, [r3, #0]
 80002ea:	3b01      	subs	r3, #1
 80002ec:	b2da      	uxtb	r2, r3
 80002ee:	4b40      	ldr	r3, [pc, #256]	; (80003f0 <quetbanphim+0x2a4>)
 80002f0:	701a      	strb	r2, [r3, #0]
					var[dem]=17;
 80002f2:	4b3f      	ldr	r3, [pc, #252]	; (80003f0 <quetbanphim+0x2a4>)
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	461a      	mov	r2, r3
 80002f8:	4b3e      	ldr	r3, [pc, #248]	; (80003f4 <quetbanphim+0x2a8>)
 80002fa:	2111      	movs	r1, #17
 80002fc:	5499      	strb	r1, [r3, r2]
			}
		}
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,1);
 80002fe:	2201      	movs	r2, #1
 8000300:	2101      	movs	r1, #1
 8000302:	4838      	ldr	r0, [pc, #224]	; (80003e4 <quetbanphim+0x298>)
 8000304:	f001 f951 	bl	80015aa <HAL_GPIO_WritePin>
	// nhan cot thu hai
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,0);
 8000308:	2200      	movs	r2, #0
 800030a:	2102      	movs	r1, #2
 800030c:	4835      	ldr	r0, [pc, #212]	; (80003e4 <quetbanphim+0x298>)
 800030e:	f001 f94c 	bl	80015aa <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==0)                // nhan phim 2
 8000312:	2108      	movs	r1, #8
 8000314:	4833      	ldr	r0, [pc, #204]	; (80003e4 <quetbanphim+0x298>)
 8000316:	f001 f931 	bl	800157c <HAL_GPIO_ReadPin>
 800031a:	4603      	mov	r3, r0
 800031c:	2b00      	cmp	r3, #0
 800031e:	d140      	bne.n	80003a2 <quetbanphim+0x256>
		{
		 {
			        while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == 0) {}
 8000320:	bf00      	nop
 8000322:	2108      	movs	r1, #8
 8000324:	482f      	ldr	r0, [pc, #188]	; (80003e4 <quetbanphim+0x298>)
 8000326:	f001 f929 	bl	800157c <HAL_GPIO_ReadPin>
 800032a:	4603      	mov	r3, r0
 800032c:	2b00      	cmp	r3, #0
 800032e:	d0f8      	beq.n	8000322 <quetbanphim+0x1d6>

			        if (last_key == 2)
 8000330:	4b2d      	ldr	r3, [pc, #180]	; (80003e8 <quetbanphim+0x29c>)
 8000332:	781b      	ldrb	r3, [r3, #0]
 8000334:	2b02      	cmp	r3, #2
 8000336:	d11e      	bne.n	8000376 <quetbanphim+0x22a>
			        {
			            if ((current_time - last_key_time) <= 500)
 8000338:	4b2c      	ldr	r3, [pc, #176]	; (80003ec <quetbanphim+0x2a0>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	687a      	ldr	r2, [r7, #4]
 800033e:	1ad3      	subs	r3, r2, r3
 8000340:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000344:	d806      	bhi.n	8000354 <quetbanphim+0x208>
			            {
			                var[dem-1] = 11;
 8000346:	4b2a      	ldr	r3, [pc, #168]	; (80003f0 <quetbanphim+0x2a4>)
 8000348:	781b      	ldrb	r3, [r3, #0]
 800034a:	3b01      	subs	r3, #1
 800034c:	4a29      	ldr	r2, [pc, #164]	; (80003f4 <quetbanphim+0x2a8>)
 800034e:	210b      	movs	r1, #11
 8000350:	54d1      	strb	r1, [r2, r3]
 8000352:	e020      	b.n	8000396 <quetbanphim+0x24a>
		//	                dem++;     // Đặt vị trí tiếp theo là var[1]
			            }
			            else
			            {
			                if (dem < 4)
 8000354:	4b26      	ldr	r3, [pc, #152]	; (80003f0 <quetbanphim+0x2a4>)
 8000356:	781b      	ldrb	r3, [r3, #0]
 8000358:	2b03      	cmp	r3, #3
 800035a:	d81c      	bhi.n	8000396 <quetbanphim+0x24a>
			                {
			                    var[dem] = 2;
 800035c:	4b24      	ldr	r3, [pc, #144]	; (80003f0 <quetbanphim+0x2a4>)
 800035e:	781b      	ldrb	r3, [r3, #0]
 8000360:	461a      	mov	r2, r3
 8000362:	4b24      	ldr	r3, [pc, #144]	; (80003f4 <quetbanphim+0x2a8>)
 8000364:	2102      	movs	r1, #2
 8000366:	5499      	strb	r1, [r3, r2]
			                    dem++;
 8000368:	4b21      	ldr	r3, [pc, #132]	; (80003f0 <quetbanphim+0x2a4>)
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	3301      	adds	r3, #1
 800036e:	b2da      	uxtb	r2, r3
 8000370:	4b1f      	ldr	r3, [pc, #124]	; (80003f0 <quetbanphim+0x2a4>)
 8000372:	701a      	strb	r2, [r3, #0]
 8000374:	e00f      	b.n	8000396 <quetbanphim+0x24a>
			                }
			            }
			        }
			        else
			        {
			            if (dem < 4)
 8000376:	4b1e      	ldr	r3, [pc, #120]	; (80003f0 <quetbanphim+0x2a4>)
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	2b03      	cmp	r3, #3
 800037c:	d80b      	bhi.n	8000396 <quetbanphim+0x24a>
			            {
			                var[dem] = 2;
 800037e:	4b1c      	ldr	r3, [pc, #112]	; (80003f0 <quetbanphim+0x2a4>)
 8000380:	781b      	ldrb	r3, [r3, #0]
 8000382:	461a      	mov	r2, r3
 8000384:	4b1b      	ldr	r3, [pc, #108]	; (80003f4 <quetbanphim+0x2a8>)
 8000386:	2102      	movs	r1, #2
 8000388:	5499      	strb	r1, [r3, r2]
			                dem++;
 800038a:	4b19      	ldr	r3, [pc, #100]	; (80003f0 <quetbanphim+0x2a4>)
 800038c:	781b      	ldrb	r3, [r3, #0]
 800038e:	3301      	adds	r3, #1
 8000390:	b2da      	uxtb	r2, r3
 8000392:	4b17      	ldr	r3, [pc, #92]	; (80003f0 <quetbanphim+0x2a4>)
 8000394:	701a      	strb	r2, [r3, #0]
			            }
			        }

			        last_key = 2;
 8000396:	4b14      	ldr	r3, [pc, #80]	; (80003e8 <quetbanphim+0x29c>)
 8000398:	2202      	movs	r2, #2
 800039a:	701a      	strb	r2, [r3, #0]
			        last_key_time = current_time;
 800039c:	4a13      	ldr	r2, [pc, #76]	; (80003ec <quetbanphim+0x2a0>)
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	6013      	str	r3, [r2, #0]
			    }
		}
	if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_4)==0)                // nhan phim 5
 80003a2:	2110      	movs	r1, #16
 80003a4:	480f      	ldr	r0, [pc, #60]	; (80003e4 <quetbanphim+0x298>)
 80003a6:	f001 f8e9 	bl	800157c <HAL_GPIO_ReadPin>
 80003aa:	4603      	mov	r3, r0
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d14a      	bne.n	8000446 <quetbanphim+0x2fa>
		{
			while(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_4)==0){}
 80003b0:	bf00      	nop
 80003b2:	2110      	movs	r1, #16
 80003b4:	480b      	ldr	r0, [pc, #44]	; (80003e4 <quetbanphim+0x298>)
 80003b6:	f001 f8e1 	bl	800157c <HAL_GPIO_ReadPin>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d0f8      	beq.n	80003b2 <quetbanphim+0x266>
		    if (last_key == 5)
 80003c0:	4b09      	ldr	r3, [pc, #36]	; (80003e8 <quetbanphim+0x29c>)
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	2b05      	cmp	r3, #5
 80003c6:	d128      	bne.n	800041a <quetbanphim+0x2ce>
					        {
					            if ((current_time - last_key_time) <= 500)
 80003c8:	4b08      	ldr	r3, [pc, #32]	; (80003ec <quetbanphim+0x2a0>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	687a      	ldr	r2, [r7, #4]
 80003ce:	1ad3      	subs	r3, r2, r3
 80003d0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80003d4:	d810      	bhi.n	80003f8 <quetbanphim+0x2ac>
					            {
					                var[dem-1] = 14;
 80003d6:	4b06      	ldr	r3, [pc, #24]	; (80003f0 <quetbanphim+0x2a4>)
 80003d8:	781b      	ldrb	r3, [r3, #0]
 80003da:	3b01      	subs	r3, #1
 80003dc:	4a05      	ldr	r2, [pc, #20]	; (80003f4 <quetbanphim+0x2a8>)
 80003de:	210e      	movs	r1, #14
 80003e0:	54d1      	strb	r1, [r2, r3]
 80003e2:	e02a      	b.n	800043a <quetbanphim+0x2ee>
 80003e4:	40010c00 	.word	0x40010c00
 80003e8:	20000008 	.word	0x20000008
 80003ec:	20000038 	.word	0x20000038
 80003f0:	20000034 	.word	0x20000034
 80003f4:	20000000 	.word	0x20000000
				//	                dem++;     // Đặt vị trí tiếp theo là var[1]
					            }
					            else
					            {
					                if (dem < 4)
 80003f8:	4b9b      	ldr	r3, [pc, #620]	; (8000668 <quetbanphim+0x51c>)
 80003fa:	781b      	ldrb	r3, [r3, #0]
 80003fc:	2b03      	cmp	r3, #3
 80003fe:	d81c      	bhi.n	800043a <quetbanphim+0x2ee>
					                {
					                    var[dem] = 5;
 8000400:	4b99      	ldr	r3, [pc, #612]	; (8000668 <quetbanphim+0x51c>)
 8000402:	781b      	ldrb	r3, [r3, #0]
 8000404:	461a      	mov	r2, r3
 8000406:	4b99      	ldr	r3, [pc, #612]	; (800066c <quetbanphim+0x520>)
 8000408:	2105      	movs	r1, #5
 800040a:	5499      	strb	r1, [r3, r2]
					                    dem++;
 800040c:	4b96      	ldr	r3, [pc, #600]	; (8000668 <quetbanphim+0x51c>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	3301      	adds	r3, #1
 8000412:	b2da      	uxtb	r2, r3
 8000414:	4b94      	ldr	r3, [pc, #592]	; (8000668 <quetbanphim+0x51c>)
 8000416:	701a      	strb	r2, [r3, #0]
 8000418:	e00f      	b.n	800043a <quetbanphim+0x2ee>
					                }
					            }
					        }
					        else
					        {
					            if (dem < 4)
 800041a:	4b93      	ldr	r3, [pc, #588]	; (8000668 <quetbanphim+0x51c>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	2b03      	cmp	r3, #3
 8000420:	d80b      	bhi.n	800043a <quetbanphim+0x2ee>
					            {
					                var[dem] = 5;
 8000422:	4b91      	ldr	r3, [pc, #580]	; (8000668 <quetbanphim+0x51c>)
 8000424:	781b      	ldrb	r3, [r3, #0]
 8000426:	461a      	mov	r2, r3
 8000428:	4b90      	ldr	r3, [pc, #576]	; (800066c <quetbanphim+0x520>)
 800042a:	2105      	movs	r1, #5
 800042c:	5499      	strb	r1, [r3, r2]
					                dem++;
 800042e:	4b8e      	ldr	r3, [pc, #568]	; (8000668 <quetbanphim+0x51c>)
 8000430:	781b      	ldrb	r3, [r3, #0]
 8000432:	3301      	adds	r3, #1
 8000434:	b2da      	uxtb	r2, r3
 8000436:	4b8c      	ldr	r3, [pc, #560]	; (8000668 <quetbanphim+0x51c>)
 8000438:	701a      	strb	r2, [r3, #0]
					            }
					        }

					        last_key = 5;
 800043a:	4b8d      	ldr	r3, [pc, #564]	; (8000670 <quetbanphim+0x524>)
 800043c:	2205      	movs	r2, #5
 800043e:	701a      	strb	r2, [r3, #0]
					        last_key_time = current_time;
 8000440:	4a8c      	ldr	r2, [pc, #560]	; (8000674 <quetbanphim+0x528>)
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	6013      	str	r3, [r2, #0]
		}
	if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_5)==0)                // nhan phim 8
 8000446:	2120      	movs	r1, #32
 8000448:	488b      	ldr	r0, [pc, #556]	; (8000678 <quetbanphim+0x52c>)
 800044a:	f001 f897 	bl	800157c <HAL_GPIO_ReadPin>
 800044e:	4603      	mov	r3, r0
 8000450:	2b00      	cmp	r3, #0
 8000452:	d117      	bne.n	8000484 <quetbanphim+0x338>
		{
			while(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_5)==0){}
 8000454:	bf00      	nop
 8000456:	2120      	movs	r1, #32
 8000458:	4887      	ldr	r0, [pc, #540]	; (8000678 <quetbanphim+0x52c>)
 800045a:	f001 f88f 	bl	800157c <HAL_GPIO_ReadPin>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	d0f8      	beq.n	8000456 <quetbanphim+0x30a>
			if(dem<4)
 8000464:	4b80      	ldr	r3, [pc, #512]	; (8000668 <quetbanphim+0x51c>)
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	2b03      	cmp	r3, #3
 800046a:	d80b      	bhi.n	8000484 <quetbanphim+0x338>
			{
				var[dem] = 8;
 800046c:	4b7e      	ldr	r3, [pc, #504]	; (8000668 <quetbanphim+0x51c>)
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	461a      	mov	r2, r3
 8000472:	4b7e      	ldr	r3, [pc, #504]	; (800066c <quetbanphim+0x520>)
 8000474:	2108      	movs	r1, #8
 8000476:	5499      	strb	r1, [r3, r2]
				dem++;
 8000478:	4b7b      	ldr	r3, [pc, #492]	; (8000668 <quetbanphim+0x51c>)
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	3301      	adds	r3, #1
 800047e:	b2da      	uxtb	r2, r3
 8000480:	4b79      	ldr	r3, [pc, #484]	; (8000668 <quetbanphim+0x51c>)
 8000482:	701a      	strb	r2, [r3, #0]
			}
		}
	if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_6)==0)                // nhan phim 0
 8000484:	2140      	movs	r1, #64	; 0x40
 8000486:	487c      	ldr	r0, [pc, #496]	; (8000678 <quetbanphim+0x52c>)
 8000488:	f001 f878 	bl	800157c <HAL_GPIO_ReadPin>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d117      	bne.n	80004c2 <quetbanphim+0x376>
		{
			while(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_6)==0){}
 8000492:	bf00      	nop
 8000494:	2140      	movs	r1, #64	; 0x40
 8000496:	4878      	ldr	r0, [pc, #480]	; (8000678 <quetbanphim+0x52c>)
 8000498:	f001 f870 	bl	800157c <HAL_GPIO_ReadPin>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d0f8      	beq.n	8000494 <quetbanphim+0x348>
			if(dem<4)
 80004a2:	4b71      	ldr	r3, [pc, #452]	; (8000668 <quetbanphim+0x51c>)
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	2b03      	cmp	r3, #3
 80004a8:	d80b      	bhi.n	80004c2 <quetbanphim+0x376>
			{
				var[dem] = 0;
 80004aa:	4b6f      	ldr	r3, [pc, #444]	; (8000668 <quetbanphim+0x51c>)
 80004ac:	781b      	ldrb	r3, [r3, #0]
 80004ae:	461a      	mov	r2, r3
 80004b0:	4b6e      	ldr	r3, [pc, #440]	; (800066c <quetbanphim+0x520>)
 80004b2:	2100      	movs	r1, #0
 80004b4:	5499      	strb	r1, [r3, r2]
				dem++;
 80004b6:	4b6c      	ldr	r3, [pc, #432]	; (8000668 <quetbanphim+0x51c>)
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	3301      	adds	r3, #1
 80004bc:	b2da      	uxtb	r2, r3
 80004be:	4b6a      	ldr	r3, [pc, #424]	; (8000668 <quetbanphim+0x51c>)
 80004c0:	701a      	strb	r2, [r3, #0]
			}
		}
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,1);
 80004c2:	2201      	movs	r2, #1
 80004c4:	2102      	movs	r1, #2
 80004c6:	486c      	ldr	r0, [pc, #432]	; (8000678 <quetbanphim+0x52c>)
 80004c8:	f001 f86f 	bl	80015aa <HAL_GPIO_WritePin>
	// nhan cot thu ba
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,0);
 80004cc:	2200      	movs	r2, #0
 80004ce:	2104      	movs	r1, #4
 80004d0:	4869      	ldr	r0, [pc, #420]	; (8000678 <quetbanphim+0x52c>)
 80004d2:	f001 f86a 	bl	80015aa <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==0)                // nhan phim 3
 80004d6:	2108      	movs	r1, #8
 80004d8:	4867      	ldr	r0, [pc, #412]	; (8000678 <quetbanphim+0x52c>)
 80004da:	f001 f84f 	bl	800157c <HAL_GPIO_ReadPin>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d140      	bne.n	8000566 <quetbanphim+0x41a>
		{
			while(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==0){}
 80004e4:	bf00      	nop
 80004e6:	2108      	movs	r1, #8
 80004e8:	4863      	ldr	r0, [pc, #396]	; (8000678 <quetbanphim+0x52c>)
 80004ea:	f001 f847 	bl	800157c <HAL_GPIO_ReadPin>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d0f8      	beq.n	80004e6 <quetbanphim+0x39a>
		    if (last_key == 3)
 80004f4:	4b5e      	ldr	r3, [pc, #376]	; (8000670 <quetbanphim+0x524>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	2b03      	cmp	r3, #3
 80004fa:	d11e      	bne.n	800053a <quetbanphim+0x3ee>
					        {
					            if ((current_time - last_key_time) <= 500)
 80004fc:	4b5d      	ldr	r3, [pc, #372]	; (8000674 <quetbanphim+0x528>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	687a      	ldr	r2, [r7, #4]
 8000502:	1ad3      	subs	r3, r2, r3
 8000504:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000508:	d806      	bhi.n	8000518 <quetbanphim+0x3cc>
					            {
					                var[dem-1] = 12;
 800050a:	4b57      	ldr	r3, [pc, #348]	; (8000668 <quetbanphim+0x51c>)
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	3b01      	subs	r3, #1
 8000510:	4a56      	ldr	r2, [pc, #344]	; (800066c <quetbanphim+0x520>)
 8000512:	210c      	movs	r1, #12
 8000514:	54d1      	strb	r1, [r2, r3]
 8000516:	e020      	b.n	800055a <quetbanphim+0x40e>
				//	                dem++;     // Đặt vị trí tiếp theo là var[1]
					            }
					            else
					            {
					                if (dem < 4)
 8000518:	4b53      	ldr	r3, [pc, #332]	; (8000668 <quetbanphim+0x51c>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	2b03      	cmp	r3, #3
 800051e:	d81c      	bhi.n	800055a <quetbanphim+0x40e>
					                {
					                    var[dem] = 3;
 8000520:	4b51      	ldr	r3, [pc, #324]	; (8000668 <quetbanphim+0x51c>)
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	461a      	mov	r2, r3
 8000526:	4b51      	ldr	r3, [pc, #324]	; (800066c <quetbanphim+0x520>)
 8000528:	2103      	movs	r1, #3
 800052a:	5499      	strb	r1, [r3, r2]
					                    dem++;
 800052c:	4b4e      	ldr	r3, [pc, #312]	; (8000668 <quetbanphim+0x51c>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	3301      	adds	r3, #1
 8000532:	b2da      	uxtb	r2, r3
 8000534:	4b4c      	ldr	r3, [pc, #304]	; (8000668 <quetbanphim+0x51c>)
 8000536:	701a      	strb	r2, [r3, #0]
 8000538:	e00f      	b.n	800055a <quetbanphim+0x40e>
					                }
					            }
					        }
					        else
					        {
					            if (dem < 4)
 800053a:	4b4b      	ldr	r3, [pc, #300]	; (8000668 <quetbanphim+0x51c>)
 800053c:	781b      	ldrb	r3, [r3, #0]
 800053e:	2b03      	cmp	r3, #3
 8000540:	d80b      	bhi.n	800055a <quetbanphim+0x40e>
					            {
					                var[dem] = 3;
 8000542:	4b49      	ldr	r3, [pc, #292]	; (8000668 <quetbanphim+0x51c>)
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	461a      	mov	r2, r3
 8000548:	4b48      	ldr	r3, [pc, #288]	; (800066c <quetbanphim+0x520>)
 800054a:	2103      	movs	r1, #3
 800054c:	5499      	strb	r1, [r3, r2]
					                dem++;
 800054e:	4b46      	ldr	r3, [pc, #280]	; (8000668 <quetbanphim+0x51c>)
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	3301      	adds	r3, #1
 8000554:	b2da      	uxtb	r2, r3
 8000556:	4b44      	ldr	r3, [pc, #272]	; (8000668 <quetbanphim+0x51c>)
 8000558:	701a      	strb	r2, [r3, #0]
					            }
					        }

					        last_key = 3;
 800055a:	4b45      	ldr	r3, [pc, #276]	; (8000670 <quetbanphim+0x524>)
 800055c:	2203      	movs	r2, #3
 800055e:	701a      	strb	r2, [r3, #0]
					        last_key_time = current_time;
 8000560:	4a44      	ldr	r2, [pc, #272]	; (8000674 <quetbanphim+0x528>)
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	6013      	str	r3, [r2, #0]
					    }

	if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_4)==0)                // nhan phim 6
 8000566:	2110      	movs	r1, #16
 8000568:	4843      	ldr	r0, [pc, #268]	; (8000678 <quetbanphim+0x52c>)
 800056a:	f001 f807 	bl	800157c <HAL_GPIO_ReadPin>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d140      	bne.n	80005f6 <quetbanphim+0x4aa>
		{
			while(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_4)==0){}
 8000574:	bf00      	nop
 8000576:	2110      	movs	r1, #16
 8000578:	483f      	ldr	r0, [pc, #252]	; (8000678 <quetbanphim+0x52c>)
 800057a:	f000 ffff 	bl	800157c <HAL_GPIO_ReadPin>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d0f8      	beq.n	8000576 <quetbanphim+0x42a>
		    if (last_key == 6)
 8000584:	4b3a      	ldr	r3, [pc, #232]	; (8000670 <quetbanphim+0x524>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	2b06      	cmp	r3, #6
 800058a:	d11e      	bne.n	80005ca <quetbanphim+0x47e>
					        {
					            if ((current_time - last_key_time) <= 500)
 800058c:	4b39      	ldr	r3, [pc, #228]	; (8000674 <quetbanphim+0x528>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	687a      	ldr	r2, [r7, #4]
 8000592:	1ad3      	subs	r3, r2, r3
 8000594:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000598:	d806      	bhi.n	80005a8 <quetbanphim+0x45c>
					            {
					                var[dem-1] = 15;
 800059a:	4b33      	ldr	r3, [pc, #204]	; (8000668 <quetbanphim+0x51c>)
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	3b01      	subs	r3, #1
 80005a0:	4a32      	ldr	r2, [pc, #200]	; (800066c <quetbanphim+0x520>)
 80005a2:	210f      	movs	r1, #15
 80005a4:	54d1      	strb	r1, [r2, r3]
 80005a6:	e020      	b.n	80005ea <quetbanphim+0x49e>
				//	                dem++;     // Đặt vị trí tiếp theo là var[1]
					            }
					            else
					            {
					                if (dem < 4)
 80005a8:	4b2f      	ldr	r3, [pc, #188]	; (8000668 <quetbanphim+0x51c>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	2b03      	cmp	r3, #3
 80005ae:	d81c      	bhi.n	80005ea <quetbanphim+0x49e>
					                {
					                    var[dem] = 6;
 80005b0:	4b2d      	ldr	r3, [pc, #180]	; (8000668 <quetbanphim+0x51c>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	461a      	mov	r2, r3
 80005b6:	4b2d      	ldr	r3, [pc, #180]	; (800066c <quetbanphim+0x520>)
 80005b8:	2106      	movs	r1, #6
 80005ba:	5499      	strb	r1, [r3, r2]
					                    dem++;
 80005bc:	4b2a      	ldr	r3, [pc, #168]	; (8000668 <quetbanphim+0x51c>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	3301      	adds	r3, #1
 80005c2:	b2da      	uxtb	r2, r3
 80005c4:	4b28      	ldr	r3, [pc, #160]	; (8000668 <quetbanphim+0x51c>)
 80005c6:	701a      	strb	r2, [r3, #0]
 80005c8:	e00f      	b.n	80005ea <quetbanphim+0x49e>
					                }
					            }
					        }
					        else
					        {
					            if (dem < 4)
 80005ca:	4b27      	ldr	r3, [pc, #156]	; (8000668 <quetbanphim+0x51c>)
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	2b03      	cmp	r3, #3
 80005d0:	d80b      	bhi.n	80005ea <quetbanphim+0x49e>
					            {
					                var[dem] = 6;
 80005d2:	4b25      	ldr	r3, [pc, #148]	; (8000668 <quetbanphim+0x51c>)
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	461a      	mov	r2, r3
 80005d8:	4b24      	ldr	r3, [pc, #144]	; (800066c <quetbanphim+0x520>)
 80005da:	2106      	movs	r1, #6
 80005dc:	5499      	strb	r1, [r3, r2]
					                dem++;
 80005de:	4b22      	ldr	r3, [pc, #136]	; (8000668 <quetbanphim+0x51c>)
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	3301      	adds	r3, #1
 80005e4:	b2da      	uxtb	r2, r3
 80005e6:	4b20      	ldr	r3, [pc, #128]	; (8000668 <quetbanphim+0x51c>)
 80005e8:	701a      	strb	r2, [r3, #0]
					            }
					        }

					        last_key = 6;
 80005ea:	4b21      	ldr	r3, [pc, #132]	; (8000670 <quetbanphim+0x524>)
 80005ec:	2206      	movs	r2, #6
 80005ee:	701a      	strb	r2, [r3, #0]
					        last_key_time = current_time;
 80005f0:	4a20      	ldr	r2, [pc, #128]	; (8000674 <quetbanphim+0x528>)
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	6013      	str	r3, [r2, #0]
					    }

	if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_5)==0)                // nhan phim 9
 80005f6:	2120      	movs	r1, #32
 80005f8:	481f      	ldr	r0, [pc, #124]	; (8000678 <quetbanphim+0x52c>)
 80005fa:	f000 ffbf 	bl	800157c <HAL_GPIO_ReadPin>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d117      	bne.n	8000634 <quetbanphim+0x4e8>
		{
			while(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_5)==0){}
 8000604:	bf00      	nop
 8000606:	2120      	movs	r1, #32
 8000608:	481b      	ldr	r0, [pc, #108]	; (8000678 <quetbanphim+0x52c>)
 800060a:	f000 ffb7 	bl	800157c <HAL_GPIO_ReadPin>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d0f8      	beq.n	8000606 <quetbanphim+0x4ba>
			if(dem<4)
 8000614:	4b14      	ldr	r3, [pc, #80]	; (8000668 <quetbanphim+0x51c>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	2b03      	cmp	r3, #3
 800061a:	d80b      	bhi.n	8000634 <quetbanphim+0x4e8>
			{
				var[dem] = 9;
 800061c:	4b12      	ldr	r3, [pc, #72]	; (8000668 <quetbanphim+0x51c>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	461a      	mov	r2, r3
 8000622:	4b12      	ldr	r3, [pc, #72]	; (800066c <quetbanphim+0x520>)
 8000624:	2109      	movs	r1, #9
 8000626:	5499      	strb	r1, [r3, r2]
				dem++;
 8000628:	4b0f      	ldr	r3, [pc, #60]	; (8000668 <quetbanphim+0x51c>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	3301      	adds	r3, #1
 800062e:	b2da      	uxtb	r2, r3
 8000630:	4b0d      	ldr	r3, [pc, #52]	; (8000668 <quetbanphim+0x51c>)
 8000632:	701a      	strb	r2, [r3, #0]
			}
		}
	if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_6)==0)                // nhan phim # hay phim Enter
 8000634:	2140      	movs	r1, #64	; 0x40
 8000636:	4810      	ldr	r0, [pc, #64]	; (8000678 <quetbanphim+0x52c>)
 8000638:	f000 ffa0 	bl	800157c <HAL_GPIO_ReadPin>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d109      	bne.n	8000656 <quetbanphim+0x50a>
		{
			while(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_6)==0){}
 8000642:	bf00      	nop
 8000644:	2140      	movs	r1, #64	; 0x40
 8000646:	480c      	ldr	r0, [pc, #48]	; (8000678 <quetbanphim+0x52c>)
 8000648:	f000 ff98 	bl	800157c <HAL_GPIO_ReadPin>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d0f8      	beq.n	8000644 <quetbanphim+0x4f8>
			CheckPass();                                         // kiem tra mat khau
 8000652:	f000 facd 	bl	8000bf0 <CheckPass>
		}
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,1);
 8000656:	2201      	movs	r2, #1
 8000658:	2104      	movs	r1, #4
 800065a:	4807      	ldr	r0, [pc, #28]	; (8000678 <quetbanphim+0x52c>)
 800065c:	f000 ffa5 	bl	80015aa <HAL_GPIO_WritePin>
}
 8000660:	bf00      	nop
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20000034 	.word	0x20000034
 800066c:	20000000 	.word	0x20000000
 8000670:	20000008 	.word	0x20000008
 8000674:	20000038 	.word	0x20000038
 8000678:	40010c00 	.word	0x40010c00

0800067c <LED>:

void LED(uint8_t number)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
 8000682:	4603      	mov	r3, r0
 8000684:	71fb      	strb	r3, [r7, #7]
    switch (number){
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	2b0f      	cmp	r3, #15
 800068a:	f200 8253 	bhi.w	8000b34 <LED+0x4b8>
 800068e:	a201      	add	r2, pc, #4	; (adr r2, 8000694 <LED+0x18>)
 8000690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000694:	080006d5 	.word	0x080006d5
 8000698:	080006ef 	.word	0x080006ef
 800069c:	08000707 	.word	0x08000707
 80006a0:	08000721 	.word	0x08000721
 80006a4:	08000771 	.word	0x08000771
 80006a8:	080007c1 	.word	0x080007c1
 80006ac:	08000811 	.word	0x08000811
 80006b0:	08000861 	.word	0x08000861
 80006b4:	080008b1 	.word	0x080008b1
 80006b8:	08000901 	.word	0x08000901
 80006bc:	08000951 	.word	0x08000951
 80006c0:	080009a1 	.word	0x080009a1
 80006c4:	080009f5 	.word	0x080009f5
 80006c8:	08000a45 	.word	0x08000a45
 80006cc:	08000a95 	.word	0x08000a95
 80006d0:	08000ae5 	.word	0x08000ae5
        case 0: // Hiển thị "0"
        	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 , 0);
 80006d4:	2200      	movs	r2, #0
 80006d6:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 80006da:	48c5      	ldr	r0, [pc, #788]	; (80009f0 <LED+0x374>)
 80006dc:	f000 ff65 	bl	80015aa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1); // a
 80006e0:	2201      	movs	r2, #1
 80006e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006e6:	48c2      	ldr	r0, [pc, #776]	; (80009f0 <LED+0x374>)
 80006e8:	f000 ff5f 	bl	80015aa <HAL_GPIO_WritePin>

            break;
 80006ec:	e229      	b.n	8000b42 <LED+0x4c6>
        case 1: // Hiển thị "1"
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5| GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10| GPIO_PIN_11, 1);
 80006ee:	2201      	movs	r2, #1
 80006f0:	f44f 617e 	mov.w	r1, #4064	; 0xfe0
 80006f4:	48be      	ldr	r0, [pc, #760]	; (80009f0 <LED+0x374>)
 80006f6:	f000 ff58 	bl	80015aa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, 0);
 80006fa:	2200      	movs	r2, #0
 80006fc:	21c0      	movs	r1, #192	; 0xc0
 80006fe:	48bc      	ldr	r0, [pc, #752]	; (80009f0 <LED+0x374>)
 8000700:	f000 ff53 	bl	80015aa <HAL_GPIO_WritePin>

            break;
 8000704:	e21d      	b.n	8000b42 <LED+0x4c6>
        case 2: // Hiển thị "2"
        	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5| GPIO_PIN_6 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_11, 0);
 8000706:	2200      	movs	r2, #0
 8000708:	f44f 6136 	mov.w	r1, #2912	; 0xb60
 800070c:	48b8      	ldr	r0, [pc, #736]	; (80009f0 <LED+0x374>)
 800070e:	f000 ff4c 	bl	80015aa <HAL_GPIO_WritePin>
        	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10|GPIO_PIN_7, 1);
 8000712:	2201      	movs	r2, #1
 8000714:	f44f 6190 	mov.w	r1, #1152	; 0x480
 8000718:	48b5      	ldr	r0, [pc, #724]	; (80009f0 <LED+0x374>)
 800071a:	f000 ff46 	bl	80015aa <HAL_GPIO_WritePin>

            break;
 800071e:	e210      	b.n	8000b42 <LED+0x4c6>
        case 3: // Hiển thị "3"
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8000720:	2200      	movs	r2, #0
 8000722:	2120      	movs	r1, #32
 8000724:	48b2      	ldr	r0, [pc, #712]	; (80009f0 <LED+0x374>)
 8000726:	f000 ff40 	bl	80015aa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 800072a:	2200      	movs	r2, #0
 800072c:	2140      	movs	r1, #64	; 0x40
 800072e:	48b0      	ldr	r0, [pc, #704]	; (80009f0 <LED+0x374>)
 8000730:	f000 ff3b 	bl	80015aa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 8000734:	2200      	movs	r2, #0
 8000736:	2180      	movs	r1, #128	; 0x80
 8000738:	48ad      	ldr	r0, [pc, #692]	; (80009f0 <LED+0x374>)
 800073a:	f000 ff36 	bl	80015aa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 800073e:	2200      	movs	r2, #0
 8000740:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000744:	48aa      	ldr	r0, [pc, #680]	; (80009f0 <LED+0x374>)
 8000746:	f000 ff30 	bl	80015aa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 800074a:	2201      	movs	r2, #1
 800074c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000750:	48a7      	ldr	r0, [pc, #668]	; (80009f0 <LED+0x374>)
 8000752:	f000 ff2a 	bl	80015aa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 1);
 8000756:	2201      	movs	r2, #1
 8000758:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800075c:	48a4      	ldr	r0, [pc, #656]	; (80009f0 <LED+0x374>)
 800075e:	f000 ff24 	bl	80015aa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 8000762:	2200      	movs	r2, #0
 8000764:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000768:	48a1      	ldr	r0, [pc, #644]	; (80009f0 <LED+0x374>)
 800076a:	f000 ff1e 	bl	80015aa <HAL_GPIO_WritePin>
            break;
 800076e:	e1e8      	b.n	8000b42 <LED+0x4c6>
        case 4: // Hiển thị "4"
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8000770:	2201      	movs	r2, #1
 8000772:	2120      	movs	r1, #32
 8000774:	489e      	ldr	r0, [pc, #632]	; (80009f0 <LED+0x374>)
 8000776:	f000 ff18 	bl	80015aa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 800077a:	2200      	movs	r2, #0
 800077c:	2140      	movs	r1, #64	; 0x40
 800077e:	489c      	ldr	r0, [pc, #624]	; (80009f0 <LED+0x374>)
 8000780:	f000 ff13 	bl	80015aa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 8000784:	2200      	movs	r2, #0
 8000786:	2180      	movs	r1, #128	; 0x80
 8000788:	4899      	ldr	r0, [pc, #612]	; (80009f0 <LED+0x374>)
 800078a:	f000 ff0e 	bl	80015aa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 800078e:	2201      	movs	r2, #1
 8000790:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000794:	4896      	ldr	r0, [pc, #600]	; (80009f0 <LED+0x374>)
 8000796:	f000 ff08 	bl	80015aa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 800079a:	2201      	movs	r2, #1
 800079c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007a0:	4893      	ldr	r0, [pc, #588]	; (80009f0 <LED+0x374>)
 80007a2:	f000 ff02 	bl	80015aa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);
 80007a6:	2200      	movs	r2, #0
 80007a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007ac:	4890      	ldr	r0, [pc, #576]	; (80009f0 <LED+0x374>)
 80007ae:	f000 fefc 	bl	80015aa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 80007b2:	2200      	movs	r2, #0
 80007b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007b8:	488d      	ldr	r0, [pc, #564]	; (80009f0 <LED+0x374>)
 80007ba:	f000 fef6 	bl	80015aa <HAL_GPIO_WritePin>
            break;
 80007be:	e1c0      	b.n	8000b42 <LED+0x4c6>
        case 5: // Hiển thị "5"
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 80007c0:	2200      	movs	r2, #0
 80007c2:	2120      	movs	r1, #32
 80007c4:	488a      	ldr	r0, [pc, #552]	; (80009f0 <LED+0x374>)
 80007c6:	f000 fef0 	bl	80015aa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 80007ca:	2201      	movs	r2, #1
 80007cc:	2140      	movs	r1, #64	; 0x40
 80007ce:	4888      	ldr	r0, [pc, #544]	; (80009f0 <LED+0x374>)
 80007d0:	f000 feeb 	bl	80015aa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 80007d4:	2200      	movs	r2, #0
 80007d6:	2180      	movs	r1, #128	; 0x80
 80007d8:	4885      	ldr	r0, [pc, #532]	; (80009f0 <LED+0x374>)
 80007da:	f000 fee6 	bl	80015aa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 80007de:	2200      	movs	r2, #0
 80007e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007e4:	4882      	ldr	r0, [pc, #520]	; (80009f0 <LED+0x374>)
 80007e6:	f000 fee0 	bl	80015aa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 80007ea:	2201      	movs	r2, #1
 80007ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007f0:	487f      	ldr	r0, [pc, #508]	; (80009f0 <LED+0x374>)
 80007f2:	f000 feda 	bl	80015aa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);
 80007f6:	2200      	movs	r2, #0
 80007f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007fc:	487c      	ldr	r0, [pc, #496]	; (80009f0 <LED+0x374>)
 80007fe:	f000 fed4 	bl	80015aa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 8000802:	2200      	movs	r2, #0
 8000804:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000808:	4879      	ldr	r0, [pc, #484]	; (80009f0 <LED+0x374>)
 800080a:	f000 fece 	bl	80015aa <HAL_GPIO_WritePin>
            break;
 800080e:	e198      	b.n	8000b42 <LED+0x4c6>
        case 6: // Hiển thị "6"
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8000810:	2200      	movs	r2, #0
 8000812:	2120      	movs	r1, #32
 8000814:	4876      	ldr	r0, [pc, #472]	; (80009f0 <LED+0x374>)
 8000816:	f000 fec8 	bl	80015aa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 800081a:	2201      	movs	r2, #1
 800081c:	2140      	movs	r1, #64	; 0x40
 800081e:	4874      	ldr	r0, [pc, #464]	; (80009f0 <LED+0x374>)
 8000820:	f000 fec3 	bl	80015aa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 8000824:	2200      	movs	r2, #0
 8000826:	2180      	movs	r1, #128	; 0x80
 8000828:	4871      	ldr	r0, [pc, #452]	; (80009f0 <LED+0x374>)
 800082a:	f000 febe 	bl	80015aa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 800082e:	2200      	movs	r2, #0
 8000830:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000834:	486e      	ldr	r0, [pc, #440]	; (80009f0 <LED+0x374>)
 8000836:	f000 feb8 	bl	80015aa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 800083a:	2200      	movs	r2, #0
 800083c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000840:	486b      	ldr	r0, [pc, #428]	; (80009f0 <LED+0x374>)
 8000842:	f000 feb2 	bl	80015aa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);
 8000846:	2200      	movs	r2, #0
 8000848:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800084c:	4868      	ldr	r0, [pc, #416]	; (80009f0 <LED+0x374>)
 800084e:	f000 feac 	bl	80015aa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 8000852:	2200      	movs	r2, #0
 8000854:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000858:	4865      	ldr	r0, [pc, #404]	; (80009f0 <LED+0x374>)
 800085a:	f000 fea6 	bl	80015aa <HAL_GPIO_WritePin>
            break;
 800085e:	e170      	b.n	8000b42 <LED+0x4c6>
        case 7: // Hiển thị "7"
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8000860:	2200      	movs	r2, #0
 8000862:	2120      	movs	r1, #32
 8000864:	4862      	ldr	r0, [pc, #392]	; (80009f0 <LED+0x374>)
 8000866:	f000 fea0 	bl	80015aa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 800086a:	2200      	movs	r2, #0
 800086c:	2140      	movs	r1, #64	; 0x40
 800086e:	4860      	ldr	r0, [pc, #384]	; (80009f0 <LED+0x374>)
 8000870:	f000 fe9b 	bl	80015aa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 8000874:	2200      	movs	r2, #0
 8000876:	2180      	movs	r1, #128	; 0x80
 8000878:	485d      	ldr	r0, [pc, #372]	; (80009f0 <LED+0x374>)
 800087a:	f000 fe96 	bl	80015aa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 800087e:	2201      	movs	r2, #1
 8000880:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000884:	485a      	ldr	r0, [pc, #360]	; (80009f0 <LED+0x374>)
 8000886:	f000 fe90 	bl	80015aa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 800088a:	2201      	movs	r2, #1
 800088c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000890:	4857      	ldr	r0, [pc, #348]	; (80009f0 <LED+0x374>)
 8000892:	f000 fe8a 	bl	80015aa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 1);
 8000896:	2201      	movs	r2, #1
 8000898:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800089c:	4854      	ldr	r0, [pc, #336]	; (80009f0 <LED+0x374>)
 800089e:	f000 fe84 	bl	80015aa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 80008a2:	2201      	movs	r2, #1
 80008a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008a8:	4851      	ldr	r0, [pc, #324]	; (80009f0 <LED+0x374>)
 80008aa:	f000 fe7e 	bl	80015aa <HAL_GPIO_WritePin>
            break;
 80008ae:	e148      	b.n	8000b42 <LED+0x4c6>
        case 8: // Hiển thị "8"
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 80008b0:	2200      	movs	r2, #0
 80008b2:	2120      	movs	r1, #32
 80008b4:	484e      	ldr	r0, [pc, #312]	; (80009f0 <LED+0x374>)
 80008b6:	f000 fe78 	bl	80015aa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 80008ba:	2200      	movs	r2, #0
 80008bc:	2140      	movs	r1, #64	; 0x40
 80008be:	484c      	ldr	r0, [pc, #304]	; (80009f0 <LED+0x374>)
 80008c0:	f000 fe73 	bl	80015aa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 80008c4:	2200      	movs	r2, #0
 80008c6:	2180      	movs	r1, #128	; 0x80
 80008c8:	4849      	ldr	r0, [pc, #292]	; (80009f0 <LED+0x374>)
 80008ca:	f000 fe6e 	bl	80015aa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 80008ce:	2200      	movs	r2, #0
 80008d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008d4:	4846      	ldr	r0, [pc, #280]	; (80009f0 <LED+0x374>)
 80008d6:	f000 fe68 	bl	80015aa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 80008da:	2200      	movs	r2, #0
 80008dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008e0:	4843      	ldr	r0, [pc, #268]	; (80009f0 <LED+0x374>)
 80008e2:	f000 fe62 	bl	80015aa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);
 80008e6:	2200      	movs	r2, #0
 80008e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008ec:	4840      	ldr	r0, [pc, #256]	; (80009f0 <LED+0x374>)
 80008ee:	f000 fe5c 	bl	80015aa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 80008f2:	2200      	movs	r2, #0
 80008f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008f8:	483d      	ldr	r0, [pc, #244]	; (80009f0 <LED+0x374>)
 80008fa:	f000 fe56 	bl	80015aa <HAL_GPIO_WritePin>
            break;
 80008fe:	e120      	b.n	8000b42 <LED+0x4c6>
        case 9: // Hiển thị "9"
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8000900:	2200      	movs	r2, #0
 8000902:	2120      	movs	r1, #32
 8000904:	483a      	ldr	r0, [pc, #232]	; (80009f0 <LED+0x374>)
 8000906:	f000 fe50 	bl	80015aa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 800090a:	2200      	movs	r2, #0
 800090c:	2140      	movs	r1, #64	; 0x40
 800090e:	4838      	ldr	r0, [pc, #224]	; (80009f0 <LED+0x374>)
 8000910:	f000 fe4b 	bl	80015aa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 8000914:	2200      	movs	r2, #0
 8000916:	2180      	movs	r1, #128	; 0x80
 8000918:	4835      	ldr	r0, [pc, #212]	; (80009f0 <LED+0x374>)
 800091a:	f000 fe46 	bl	80015aa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 800091e:	2200      	movs	r2, #0
 8000920:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000924:	4832      	ldr	r0, [pc, #200]	; (80009f0 <LED+0x374>)
 8000926:	f000 fe40 	bl	80015aa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 800092a:	2201      	movs	r2, #1
 800092c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000930:	482f      	ldr	r0, [pc, #188]	; (80009f0 <LED+0x374>)
 8000932:	f000 fe3a 	bl	80015aa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);
 8000936:	2200      	movs	r2, #0
 8000938:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800093c:	482c      	ldr	r0, [pc, #176]	; (80009f0 <LED+0x374>)
 800093e:	f000 fe34 	bl	80015aa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 8000942:	2200      	movs	r2, #0
 8000944:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000948:	4829      	ldr	r0, [pc, #164]	; (80009f0 <LED+0x374>)
 800094a:	f000 fe2e 	bl	80015aa <HAL_GPIO_WritePin>
            break;
 800094e:	e0f8      	b.n	8000b42 <LED+0x4c6>
        case 10: // Hiển thị "A"
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8000950:	2200      	movs	r2, #0
 8000952:	2120      	movs	r1, #32
 8000954:	4826      	ldr	r0, [pc, #152]	; (80009f0 <LED+0x374>)
 8000956:	f000 fe28 	bl	80015aa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 800095a:	2200      	movs	r2, #0
 800095c:	2140      	movs	r1, #64	; 0x40
 800095e:	4824      	ldr	r0, [pc, #144]	; (80009f0 <LED+0x374>)
 8000960:	f000 fe23 	bl	80015aa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 8000964:	2200      	movs	r2, #0
 8000966:	2180      	movs	r1, #128	; 0x80
 8000968:	4821      	ldr	r0, [pc, #132]	; (80009f0 <LED+0x374>)
 800096a:	f000 fe1e 	bl	80015aa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 800096e:	2201      	movs	r2, #1
 8000970:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000974:	481e      	ldr	r0, [pc, #120]	; (80009f0 <LED+0x374>)
 8000976:	f000 fe18 	bl	80015aa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 800097a:	2200      	movs	r2, #0
 800097c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000980:	481b      	ldr	r0, [pc, #108]	; (80009f0 <LED+0x374>)
 8000982:	f000 fe12 	bl	80015aa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);
 8000986:	2200      	movs	r2, #0
 8000988:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800098c:	4818      	ldr	r0, [pc, #96]	; (80009f0 <LED+0x374>)
 800098e:	f000 fe0c 	bl	80015aa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 8000992:	2200      	movs	r2, #0
 8000994:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000998:	4815      	ldr	r0, [pc, #84]	; (80009f0 <LED+0x374>)
 800099a:	f000 fe06 	bl	80015aa <HAL_GPIO_WritePin>
            break;
 800099e:	e0d0      	b.n	8000b42 <LED+0x4c6>
        case 11: // Hiển thị "B"
               HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 80009a0:	2201      	movs	r2, #1
 80009a2:	2120      	movs	r1, #32
 80009a4:	4812      	ldr	r0, [pc, #72]	; (80009f0 <LED+0x374>)
 80009a6:	f000 fe00 	bl	80015aa <HAL_GPIO_WritePin>
               HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 80009aa:	2201      	movs	r2, #1
 80009ac:	2140      	movs	r1, #64	; 0x40
 80009ae:	4810      	ldr	r0, [pc, #64]	; (80009f0 <LED+0x374>)
 80009b0:	f000 fdfb 	bl	80015aa <HAL_GPIO_WritePin>
               HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 80009b4:	2200      	movs	r2, #0
 80009b6:	2180      	movs	r1, #128	; 0x80
 80009b8:	480d      	ldr	r0, [pc, #52]	; (80009f0 <LED+0x374>)
 80009ba:	f000 fdf6 	bl	80015aa <HAL_GPIO_WritePin>
               HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 80009be:	2200      	movs	r2, #0
 80009c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009c4:	480a      	ldr	r0, [pc, #40]	; (80009f0 <LED+0x374>)
 80009c6:	f000 fdf0 	bl	80015aa <HAL_GPIO_WritePin>
               HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 80009ca:	2200      	movs	r2, #0
 80009cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009d0:	4807      	ldr	r0, [pc, #28]	; (80009f0 <LED+0x374>)
 80009d2:	f000 fdea 	bl	80015aa <HAL_GPIO_WritePin>
               HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);
 80009d6:	2200      	movs	r2, #0
 80009d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009dc:	4804      	ldr	r0, [pc, #16]	; (80009f0 <LED+0x374>)
 80009de:	f000 fde4 	bl	80015aa <HAL_GPIO_WritePin>
               HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 80009e2:	2200      	movs	r2, #0
 80009e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009e8:	4801      	ldr	r0, [pc, #4]	; (80009f0 <LED+0x374>)
 80009ea:	f000 fdde 	bl	80015aa <HAL_GPIO_WritePin>
               break;
 80009ee:	e0a8      	b.n	8000b42 <LED+0x4c6>
 80009f0:	40010800 	.word	0x40010800
           case 12: // Hiển thị "C"
               HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 80009f4:	2200      	movs	r2, #0
 80009f6:	2120      	movs	r1, #32
 80009f8:	4854      	ldr	r0, [pc, #336]	; (8000b4c <LED+0x4d0>)
 80009fa:	f000 fdd6 	bl	80015aa <HAL_GPIO_WritePin>
               HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 80009fe:	2201      	movs	r2, #1
 8000a00:	2140      	movs	r1, #64	; 0x40
 8000a02:	4852      	ldr	r0, [pc, #328]	; (8000b4c <LED+0x4d0>)
 8000a04:	f000 fdd1 	bl	80015aa <HAL_GPIO_WritePin>
               HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 8000a08:	2201      	movs	r2, #1
 8000a0a:	2180      	movs	r1, #128	; 0x80
 8000a0c:	484f      	ldr	r0, [pc, #316]	; (8000b4c <LED+0x4d0>)
 8000a0e:	f000 fdcc 	bl	80015aa <HAL_GPIO_WritePin>
               HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 8000a12:	2200      	movs	r2, #0
 8000a14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a18:	484c      	ldr	r0, [pc, #304]	; (8000b4c <LED+0x4d0>)
 8000a1a:	f000 fdc6 	bl	80015aa <HAL_GPIO_WritePin>
               HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a24:	4849      	ldr	r0, [pc, #292]	; (8000b4c <LED+0x4d0>)
 8000a26:	f000 fdc0 	bl	80015aa <HAL_GPIO_WritePin>
               HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a30:	4846      	ldr	r0, [pc, #280]	; (8000b4c <LED+0x4d0>)
 8000a32:	f000 fdba 	bl	80015aa <HAL_GPIO_WritePin>
               HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8000a36:	2201      	movs	r2, #1
 8000a38:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a3c:	4843      	ldr	r0, [pc, #268]	; (8000b4c <LED+0x4d0>)
 8000a3e:	f000 fdb4 	bl	80015aa <HAL_GPIO_WritePin>
               break;
 8000a42:	e07e      	b.n	8000b42 <LED+0x4c6>
           case 13: // Hiển thị "D"
               HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8000a44:	2201      	movs	r2, #1
 8000a46:	2120      	movs	r1, #32
 8000a48:	4840      	ldr	r0, [pc, #256]	; (8000b4c <LED+0x4d0>)
 8000a4a:	f000 fdae 	bl	80015aa <HAL_GPIO_WritePin>
               HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2140      	movs	r1, #64	; 0x40
 8000a52:	483e      	ldr	r0, [pc, #248]	; (8000b4c <LED+0x4d0>)
 8000a54:	f000 fda9 	bl	80015aa <HAL_GPIO_WritePin>
               HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	2180      	movs	r1, #128	; 0x80
 8000a5c:	483b      	ldr	r0, [pc, #236]	; (8000b4c <LED+0x4d0>)
 8000a5e:	f000 fda4 	bl	80015aa <HAL_GPIO_WritePin>
               HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 8000a62:	2200      	movs	r2, #0
 8000a64:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a68:	4838      	ldr	r0, [pc, #224]	; (8000b4c <LED+0x4d0>)
 8000a6a:	f000 fd9e 	bl	80015aa <HAL_GPIO_WritePin>
               HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a74:	4835      	ldr	r0, [pc, #212]	; (8000b4c <LED+0x4d0>)
 8000a76:	f000 fd98 	bl	80015aa <HAL_GPIO_WritePin>
               HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 1);
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a80:	4832      	ldr	r0, [pc, #200]	; (8000b4c <LED+0x4d0>)
 8000a82:	f000 fd92 	bl	80015aa <HAL_GPIO_WritePin>
               HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 8000a86:	2200      	movs	r2, #0
 8000a88:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a8c:	482f      	ldr	r0, [pc, #188]	; (8000b4c <LED+0x4d0>)
 8000a8e:	f000 fd8c 	bl	80015aa <HAL_GPIO_WritePin>
               break;
 8000a92:	e056      	b.n	8000b42 <LED+0x4c6>
           case 14: // Hiển thị "E"
               HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8000a94:	2200      	movs	r2, #0
 8000a96:	2120      	movs	r1, #32
 8000a98:	482c      	ldr	r0, [pc, #176]	; (8000b4c <LED+0x4d0>)
 8000a9a:	f000 fd86 	bl	80015aa <HAL_GPIO_WritePin>
               HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	2140      	movs	r1, #64	; 0x40
 8000aa2:	482a      	ldr	r0, [pc, #168]	; (8000b4c <LED+0x4d0>)
 8000aa4:	f000 fd81 	bl	80015aa <HAL_GPIO_WritePin>
               HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	2180      	movs	r1, #128	; 0x80
 8000aac:	4827      	ldr	r0, [pc, #156]	; (8000b4c <LED+0x4d0>)
 8000aae:	f000 fd7c 	bl	80015aa <HAL_GPIO_WritePin>
               HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ab8:	4824      	ldr	r0, [pc, #144]	; (8000b4c <LED+0x4d0>)
 8000aba:	f000 fd76 	bl	80015aa <HAL_GPIO_WritePin>
               HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ac4:	4821      	ldr	r0, [pc, #132]	; (8000b4c <LED+0x4d0>)
 8000ac6:	f000 fd70 	bl	80015aa <HAL_GPIO_WritePin>
               HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);
 8000aca:	2200      	movs	r2, #0
 8000acc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ad0:	481e      	ldr	r0, [pc, #120]	; (8000b4c <LED+0x4d0>)
 8000ad2:	f000 fd6a 	bl	80015aa <HAL_GPIO_WritePin>
               HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000adc:	481b      	ldr	r0, [pc, #108]	; (8000b4c <LED+0x4d0>)
 8000ade:	f000 fd64 	bl	80015aa <HAL_GPIO_WritePin>
               break;
 8000ae2:	e02e      	b.n	8000b42 <LED+0x4c6>
           case 15: // Hiển thị "F"
               HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	2120      	movs	r1, #32
 8000ae8:	4818      	ldr	r0, [pc, #96]	; (8000b4c <LED+0x4d0>)
 8000aea:	f000 fd5e 	bl	80015aa <HAL_GPIO_WritePin>
               HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 8000aee:	2201      	movs	r2, #1
 8000af0:	2140      	movs	r1, #64	; 0x40
 8000af2:	4816      	ldr	r0, [pc, #88]	; (8000b4c <LED+0x4d0>)
 8000af4:	f000 fd59 	bl	80015aa <HAL_GPIO_WritePin>
               HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 8000af8:	2201      	movs	r2, #1
 8000afa:	2180      	movs	r1, #128	; 0x80
 8000afc:	4813      	ldr	r0, [pc, #76]	; (8000b4c <LED+0x4d0>)
 8000afe:	f000 fd54 	bl	80015aa <HAL_GPIO_WritePin>
               HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 8000b02:	2201      	movs	r2, #1
 8000b04:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b08:	4810      	ldr	r0, [pc, #64]	; (8000b4c <LED+0x4d0>)
 8000b0a:	f000 fd4e 	bl	80015aa <HAL_GPIO_WritePin>
               HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b14:	480d      	ldr	r0, [pc, #52]	; (8000b4c <LED+0x4d0>)
 8000b16:	f000 fd48 	bl	80015aa <HAL_GPIO_WritePin>
               HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b20:	480a      	ldr	r0, [pc, #40]	; (8000b4c <LED+0x4d0>)
 8000b22:	f000 fd42 	bl	80015aa <HAL_GPIO_WritePin>
               HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 8000b26:	2200      	movs	r2, #0
 8000b28:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b2c:	4807      	ldr	r0, [pc, #28]	; (8000b4c <LED+0x4d0>)
 8000b2e:	f000 fd3c 	bl	80015aa <HAL_GPIO_WritePin>
               break;
 8000b32:	e006      	b.n	8000b42 <LED+0x4c6>
        default: // Tắt LED
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 |
 8000b34:	2201      	movs	r2, #1
 8000b36:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 8000b3a:	4804      	ldr	r0, [pc, #16]	; (8000b4c <LED+0x4d0>)
 8000b3c:	f000 fd35 	bl	80015aa <HAL_GPIO_WritePin>
                                     GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 , 1);
            break;
 8000b40:	bf00      	nop
    }

}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40010800 	.word	0x40010800

08000b50 <quetled>:


void quetled()
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,1);                // quet led so 1
 8000b54:	2201      	movs	r2, #1
 8000b56:	2101      	movs	r1, #1
 8000b58:	4823      	ldr	r0, [pc, #140]	; (8000be8 <quetled+0x98>)
 8000b5a:	f000 fd26 	bl	80015aa <HAL_GPIO_WritePin>
	LED(var[0]);
 8000b5e:	4b23      	ldr	r3, [pc, #140]	; (8000bec <quetled+0x9c>)
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	4618      	mov	r0, r3
 8000b64:	f7ff fd8a 	bl	800067c <LED>
	HAL_Delay(5);
 8000b68:	2005      	movs	r0, #5
 8000b6a:	f000 fa85 	bl	8001078 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,0);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2101      	movs	r1, #1
 8000b72:	481d      	ldr	r0, [pc, #116]	; (8000be8 <quetled+0x98>)
 8000b74:	f000 fd19 	bl	80015aa <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,1);                // quet led so 2
 8000b78:	2201      	movs	r2, #1
 8000b7a:	2102      	movs	r1, #2
 8000b7c:	481a      	ldr	r0, [pc, #104]	; (8000be8 <quetled+0x98>)
 8000b7e:	f000 fd14 	bl	80015aa <HAL_GPIO_WritePin>
	LED(var[1]);
 8000b82:	4b1a      	ldr	r3, [pc, #104]	; (8000bec <quetled+0x9c>)
 8000b84:	785b      	ldrb	r3, [r3, #1]
 8000b86:	4618      	mov	r0, r3
 8000b88:	f7ff fd78 	bl	800067c <LED>
	HAL_Delay(5);
 8000b8c:	2005      	movs	r0, #5
 8000b8e:	f000 fa73 	bl	8001078 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,0);
 8000b92:	2200      	movs	r2, #0
 8000b94:	2102      	movs	r1, #2
 8000b96:	4814      	ldr	r0, [pc, #80]	; (8000be8 <quetled+0x98>)
 8000b98:	f000 fd07 	bl	80015aa <HAL_GPIO_WritePin>


	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_2,1);                // quet led so 3
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	2104      	movs	r1, #4
 8000ba0:	4811      	ldr	r0, [pc, #68]	; (8000be8 <quetled+0x98>)
 8000ba2:	f000 fd02 	bl	80015aa <HAL_GPIO_WritePin>
	LED(var[2]);
 8000ba6:	4b11      	ldr	r3, [pc, #68]	; (8000bec <quetled+0x9c>)
 8000ba8:	789b      	ldrb	r3, [r3, #2]
 8000baa:	4618      	mov	r0, r3
 8000bac:	f7ff fd66 	bl	800067c <LED>
	HAL_Delay(5);
 8000bb0:	2005      	movs	r0, #5
 8000bb2:	f000 fa61 	bl	8001078 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_2,0);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2104      	movs	r1, #4
 8000bba:	480b      	ldr	r0, [pc, #44]	; (8000be8 <quetled+0x98>)
 8000bbc:	f000 fcf5 	bl	80015aa <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,1);                // quet led so 4
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	2108      	movs	r1, #8
 8000bc4:	4808      	ldr	r0, [pc, #32]	; (8000be8 <quetled+0x98>)
 8000bc6:	f000 fcf0 	bl	80015aa <HAL_GPIO_WritePin>
	LED(var[3]);
 8000bca:	4b08      	ldr	r3, [pc, #32]	; (8000bec <quetled+0x9c>)
 8000bcc:	78db      	ldrb	r3, [r3, #3]
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f7ff fd54 	bl	800067c <LED>
	HAL_Delay(5);
 8000bd4:	2005      	movs	r0, #5
 8000bd6:	f000 fa4f 	bl	8001078 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,0);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2108      	movs	r1, #8
 8000bde:	4802      	ldr	r0, [pc, #8]	; (8000be8 <quetled+0x98>)
 8000be0:	f000 fce3 	bl	80015aa <HAL_GPIO_WritePin>

}
 8000be4:	bf00      	nop
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	40010800 	.word	0x40010800
 8000bec:	20000000 	.word	0x20000000

08000bf0 <CheckPass>:

void CheckPass(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
    if (Nhapsai < 3)
 8000bf6:	4b3b      	ldr	r3, [pc, #236]	; (8000ce4 <CheckPass+0xf4>)
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	2b02      	cmp	r3, #2
 8000bfc:	d865      	bhi.n	8000cca <CheckPass+0xda>
    {
        int match = 1; // Giả định là đúng
 8000bfe:	2301      	movs	r3, #1
 8000c00:	60fb      	str	r3, [r7, #12]
        for (int k = 0; k < 4; k++)
 8000c02:	2300      	movs	r3, #0
 8000c04:	60bb      	str	r3, [r7, #8]
 8000c06:	e00f      	b.n	8000c28 <CheckPass+0x38>
        {
            if (var[k] != password[k])
 8000c08:	4a37      	ldr	r2, [pc, #220]	; (8000ce8 <CheckPass+0xf8>)
 8000c0a:	68bb      	ldr	r3, [r7, #8]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	781a      	ldrb	r2, [r3, #0]
 8000c10:	4936      	ldr	r1, [pc, #216]	; (8000cec <CheckPass+0xfc>)
 8000c12:	68bb      	ldr	r3, [r7, #8]
 8000c14:	440b      	add	r3, r1
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	d002      	beq.n	8000c22 <CheckPass+0x32>
            {
                match = 0; // Nếu sai, đặt c�? báo sai
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	60fb      	str	r3, [r7, #12]
                break;
 8000c20:	e005      	b.n	8000c2e <CheckPass+0x3e>
        for (int k = 0; k < 4; k++)
 8000c22:	68bb      	ldr	r3, [r7, #8]
 8000c24:	3301      	adds	r3, #1
 8000c26:	60bb      	str	r3, [r7, #8]
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	2b03      	cmp	r3, #3
 8000c2c:	ddec      	ble.n	8000c08 <CheckPass+0x18>
            }
        }
        if (match)
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d026      	beq.n	8000c82 <CheckPass+0x92>
        {
            for (int i = 0; i < 4; i++)
 8000c34:	2300      	movs	r3, #0
 8000c36:	607b      	str	r3, [r7, #4]
 8000c38:	e007      	b.n	8000c4a <CheckPass+0x5a>
                var[i] = 11; // Hiển thị thành công
 8000c3a:	4a2b      	ldr	r2, [pc, #172]	; (8000ce8 <CheckPass+0xf8>)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	4413      	add	r3, r2
 8000c40:	220b      	movs	r2, #11
 8000c42:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < 4; i++)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	3301      	adds	r3, #1
 8000c48:	607b      	str	r3, [r7, #4]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2b03      	cmp	r3, #3
 8000c4e:	ddf4      	ble.n	8000c3a <CheckPass+0x4a>
            dem = 0;
 8000c50:	4b27      	ldr	r3, [pc, #156]	; (8000cf0 <CheckPass+0x100>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	701a      	strb	r2, [r3, #0]
            Nhapsai = 0; // Reset số lần nhập sai
 8000c56:	4b23      	ldr	r3, [pc, #140]	; (8000ce4 <CheckPass+0xf4>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	701a      	strb	r2, [r3, #0]
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, SET);
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c62:	4824      	ldr	r0, [pc, #144]	; (8000cf4 <CheckPass+0x104>)
 8000c64:	f000 fca1 	bl	80015aa <HAL_GPIO_WritePin>

            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, RESET);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c6e:	4821      	ldr	r0, [pc, #132]	; (8000cf4 <CheckPass+0x104>)
 8000c70:	f000 fc9b 	bl	80015aa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, RESET);
 8000c74:	2200      	movs	r2, #0
 8000c76:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c7a:	481e      	ldr	r0, [pc, #120]	; (8000cf4 <CheckPass+0x104>)
 8000c7c:	f000 fc95 	bl	80015aa <HAL_GPIO_WritePin>
    else
    {
HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_11);

HAL_Delay(200);}
}
 8000c80:	e02b      	b.n	8000cda <CheckPass+0xea>
            for (int j = 0; j < 4; j++)
 8000c82:	2300      	movs	r3, #0
 8000c84:	603b      	str	r3, [r7, #0]
 8000c86:	e007      	b.n	8000c98 <CheckPass+0xa8>
                var[j] = 17; // Hiển thị thất bại
 8000c88:	4a17      	ldr	r2, [pc, #92]	; (8000ce8 <CheckPass+0xf8>)
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	4413      	add	r3, r2
 8000c8e:	2211      	movs	r2, #17
 8000c90:	701a      	strb	r2, [r3, #0]
            for (int j = 0; j < 4; j++)
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	3301      	adds	r3, #1
 8000c96:	603b      	str	r3, [r7, #0]
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	2b03      	cmp	r3, #3
 8000c9c:	ddf4      	ble.n	8000c88 <CheckPass+0x98>
            dem = 0;
 8000c9e:	4b14      	ldr	r3, [pc, #80]	; (8000cf0 <CheckPass+0x100>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	701a      	strb	r2, [r3, #0]
            Nhapsai++; // Tăng số lần nhập sai
 8000ca4:	4b0f      	ldr	r3, [pc, #60]	; (8000ce4 <CheckPass+0xf4>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	3301      	adds	r3, #1
 8000caa:	b2da      	uxtb	r2, r3
 8000cac:	4b0d      	ldr	r3, [pc, #52]	; (8000ce4 <CheckPass+0xf4>)
 8000cae:	701a      	strb	r2, [r3, #0]
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, SET);
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cb6:	480f      	ldr	r0, [pc, #60]	; (8000cf4 <CheckPass+0x104>)
 8000cb8:	f000 fc77 	bl	80015aa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cc2:	480c      	ldr	r0, [pc, #48]	; (8000cf4 <CheckPass+0x104>)
 8000cc4:	f000 fc71 	bl	80015aa <HAL_GPIO_WritePin>
}
 8000cc8:	e007      	b.n	8000cda <CheckPass+0xea>
HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_11);
 8000cca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cce:	4809      	ldr	r0, [pc, #36]	; (8000cf4 <CheckPass+0x104>)
 8000cd0:	f000 fc83 	bl	80015da <HAL_GPIO_TogglePin>
HAL_Delay(200);}
 8000cd4:	20c8      	movs	r0, #200	; 0xc8
 8000cd6:	f000 f9cf 	bl	8001078 <HAL_Delay>
}
 8000cda:	bf00      	nop
 8000cdc:	3710      	adds	r7, #16
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	20000035 	.word	0x20000035
 8000ce8:	20000000 	.word	0x20000000
 8000cec:	20000004 	.word	0x20000004
 8000cf0:	20000034 	.word	0x20000034
 8000cf4:	40010c00 	.word	0x40010c00

08000cf8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cfc:	f000 f95a 	bl	8000fb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d00:	f000 f807 	bl	8000d12 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d04:	f000 f840 	bl	8000d88 <MX_GPIO_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
quetbanphim();
 8000d08:	f7ff fa20 	bl	800014c <quetbanphim>
quetled();
 8000d0c:	f7ff ff20 	bl	8000b50 <quetled>
quetbanphim();
 8000d10:	e7fa      	b.n	8000d08 <main+0x10>

08000d12 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b090      	sub	sp, #64	; 0x40
 8000d16:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d18:	f107 0318 	add.w	r3, r7, #24
 8000d1c:	2228      	movs	r2, #40	; 0x28
 8000d1e:	2100      	movs	r1, #0
 8000d20:	4618      	mov	r0, r3
 8000d22:	f001 f873 	bl	8001e0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d26:	1d3b      	adds	r3, r7, #4
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
 8000d32:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d34:	2302      	movs	r3, #2
 8000d36:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d3c:	2310      	movs	r3, #16
 8000d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d40:	2300      	movs	r3, #0
 8000d42:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d44:	f107 0318 	add.w	r3, r7, #24
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f000 fc5f 	bl	800160c <HAL_RCC_OscConfig>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000d54:	f000 f8a2 	bl	8000e9c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d58:	230f      	movs	r3, #15
 8000d5a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d60:	2300      	movs	r3, #0
 8000d62:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d64:	2300      	movs	r3, #0
 8000d66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d6c:	1d3b      	adds	r3, r7, #4
 8000d6e:	2100      	movs	r1, #0
 8000d70:	4618      	mov	r0, r3
 8000d72:	f000 fecb 	bl	8001b0c <HAL_RCC_ClockConfig>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000d7c:	f000 f88e 	bl	8000e9c <Error_Handler>
  }
}
 8000d80:	bf00      	nop
 8000d82:	3740      	adds	r7, #64	; 0x40
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b088      	sub	sp, #32
 8000d8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8e:	f107 0310 	add.w	r3, r7, #16
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	605a      	str	r2, [r3, #4]
 8000d98:	609a      	str	r2, [r3, #8]
 8000d9a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d9c:	4b3b      	ldr	r3, [pc, #236]	; (8000e8c <MX_GPIO_Init+0x104>)
 8000d9e:	699b      	ldr	r3, [r3, #24]
 8000da0:	4a3a      	ldr	r2, [pc, #232]	; (8000e8c <MX_GPIO_Init+0x104>)
 8000da2:	f043 0310 	orr.w	r3, r3, #16
 8000da6:	6193      	str	r3, [r2, #24]
 8000da8:	4b38      	ldr	r3, [pc, #224]	; (8000e8c <MX_GPIO_Init+0x104>)
 8000daa:	699b      	ldr	r3, [r3, #24]
 8000dac:	f003 0310 	and.w	r3, r3, #16
 8000db0:	60fb      	str	r3, [r7, #12]
 8000db2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db4:	4b35      	ldr	r3, [pc, #212]	; (8000e8c <MX_GPIO_Init+0x104>)
 8000db6:	699b      	ldr	r3, [r3, #24]
 8000db8:	4a34      	ldr	r2, [pc, #208]	; (8000e8c <MX_GPIO_Init+0x104>)
 8000dba:	f043 0304 	orr.w	r3, r3, #4
 8000dbe:	6193      	str	r3, [r2, #24]
 8000dc0:	4b32      	ldr	r3, [pc, #200]	; (8000e8c <MX_GPIO_Init+0x104>)
 8000dc2:	699b      	ldr	r3, [r3, #24]
 8000dc4:	f003 0304 	and.w	r3, r3, #4
 8000dc8:	60bb      	str	r3, [r7, #8]
 8000dca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dcc:	4b2f      	ldr	r3, [pc, #188]	; (8000e8c <MX_GPIO_Init+0x104>)
 8000dce:	699b      	ldr	r3, [r3, #24]
 8000dd0:	4a2e      	ldr	r2, [pc, #184]	; (8000e8c <MX_GPIO_Init+0x104>)
 8000dd2:	f043 0308 	orr.w	r3, r3, #8
 8000dd6:	6193      	str	r3, [r2, #24]
 8000dd8:	4b2c      	ldr	r3, [pc, #176]	; (8000e8c <MX_GPIO_Init+0x104>)
 8000dda:	699b      	ldr	r3, [r3, #24]
 8000ddc:	f003 0308 	and.w	r3, r3, #8
 8000de0:	607b      	str	r3, [r7, #4]
 8000de2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000de4:	2200      	movs	r2, #0
 8000de6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dea:	4829      	ldr	r0, [pc, #164]	; (8000e90 <MX_GPIO_Init+0x108>)
 8000dec:	f000 fbdd 	bl	80015aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, L1_Pin|L2_Pin|L3_Pin|L4_Pin
 8000df0:	2200      	movs	r2, #0
 8000df2:	f641 71ef 	movw	r1, #8175	; 0x1fef
 8000df6:	4827      	ldr	r0, [pc, #156]	; (8000e94 <MX_GPIO_Init+0x10c>)
 8000df8:	f000 fbd7 	bl	80015aa <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|Q1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, C1_Pin|C2_Pin|C3_Pin, GPIO_PIN_SET);
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	2107      	movs	r1, #7
 8000e00:	4825      	ldr	r0, [pc, #148]	; (8000e98 <MX_GPIO_Init+0x110>)
 8000e02:	f000 fbd2 	bl	80015aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8000e06:	2200      	movs	r2, #0
 8000e08:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 8000e0c:	4822      	ldr	r0, [pc, #136]	; (8000e98 <MX_GPIO_Init+0x110>)
 8000e0e:	f000 fbcc 	bl	80015aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e20:	2302      	movs	r3, #2
 8000e22:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e24:	f107 0310 	add.w	r3, r7, #16
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4819      	ldr	r0, [pc, #100]	; (8000e90 <MX_GPIO_Init+0x108>)
 8000e2c:	f000 fa2c 	bl	8001288 <HAL_GPIO_Init>

  /*Configure GPIO pins : L1_Pin L2_Pin L3_Pin L4_Pin
                           PA5 PA6 PA7 PA8
                           PA9 PA10 PA11 Q1_Pin */
  GPIO_InitStruct.Pin = L1_Pin|L2_Pin|L3_Pin|L4_Pin
 8000e30:	f641 73ef 	movw	r3, #8175	; 0x1fef
 8000e34:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|Q1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e36:	2301      	movs	r3, #1
 8000e38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e42:	f107 0310 	add.w	r3, r7, #16
 8000e46:	4619      	mov	r1, r3
 8000e48:	4812      	ldr	r0, [pc, #72]	; (8000e94 <MX_GPIO_Init+0x10c>)
 8000e4a:	f000 fa1d 	bl	8001288 <HAL_GPIO_Init>

  /*Configure GPIO pins : C1_Pin C2_Pin C3_Pin PB11
                           PB12 PB13 */
  GPIO_InitStruct.Pin = C1_Pin|C2_Pin|C3_Pin|GPIO_PIN_11
 8000e4e:	f643 0307 	movw	r3, #14343	; 0x3807
 8000e52:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e54:	2301      	movs	r3, #1
 8000e56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e60:	f107 0310 	add.w	r3, r7, #16
 8000e64:	4619      	mov	r1, r3
 8000e66:	480c      	ldr	r0, [pc, #48]	; (8000e98 <MX_GPIO_Init+0x110>)
 8000e68:	f000 fa0e 	bl	8001288 <HAL_GPIO_Init>

  /*Configure GPIO pins : R1_Pin R2_Pin R3_Pin R4_Pin */
  GPIO_InitStruct.Pin = R1_Pin|R2_Pin|R3_Pin|R4_Pin;
 8000e6c:	2378      	movs	r3, #120	; 0x78
 8000e6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e70:	2300      	movs	r3, #0
 8000e72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e74:	2301      	movs	r3, #1
 8000e76:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e78:	f107 0310 	add.w	r3, r7, #16
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4806      	ldr	r0, [pc, #24]	; (8000e98 <MX_GPIO_Init+0x110>)
 8000e80:	f000 fa02 	bl	8001288 <HAL_GPIO_Init>

}
 8000e84:	bf00      	nop
 8000e86:	3720      	adds	r7, #32
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	40021000 	.word	0x40021000
 8000e90:	40011000 	.word	0x40011000
 8000e94:	40010800 	.word	0x40010800
 8000e98:	40010c00 	.word	0x40010c00

08000e9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ea0:	b672      	cpsid	i
}
 8000ea2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ea4:	e7fe      	b.n	8000ea4 <Error_Handler+0x8>
	...

08000ea8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000eae:	4b15      	ldr	r3, [pc, #84]	; (8000f04 <HAL_MspInit+0x5c>)
 8000eb0:	699b      	ldr	r3, [r3, #24]
 8000eb2:	4a14      	ldr	r2, [pc, #80]	; (8000f04 <HAL_MspInit+0x5c>)
 8000eb4:	f043 0301 	orr.w	r3, r3, #1
 8000eb8:	6193      	str	r3, [r2, #24]
 8000eba:	4b12      	ldr	r3, [pc, #72]	; (8000f04 <HAL_MspInit+0x5c>)
 8000ebc:	699b      	ldr	r3, [r3, #24]
 8000ebe:	f003 0301 	and.w	r3, r3, #1
 8000ec2:	60bb      	str	r3, [r7, #8]
 8000ec4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ec6:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <HAL_MspInit+0x5c>)
 8000ec8:	69db      	ldr	r3, [r3, #28]
 8000eca:	4a0e      	ldr	r2, [pc, #56]	; (8000f04 <HAL_MspInit+0x5c>)
 8000ecc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ed0:	61d3      	str	r3, [r2, #28]
 8000ed2:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <HAL_MspInit+0x5c>)
 8000ed4:	69db      	ldr	r3, [r3, #28]
 8000ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eda:	607b      	str	r3, [r7, #4]
 8000edc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ede:	4b0a      	ldr	r3, [pc, #40]	; (8000f08 <HAL_MspInit+0x60>)
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	4a04      	ldr	r2, [pc, #16]	; (8000f08 <HAL_MspInit+0x60>)
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000efa:	bf00      	nop
 8000efc:	3714      	adds	r7, #20
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bc80      	pop	{r7}
 8000f02:	4770      	bx	lr
 8000f04:	40021000 	.word	0x40021000
 8000f08:	40010000 	.word	0x40010000

08000f0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f10:	e7fe      	b.n	8000f10 <NMI_Handler+0x4>

08000f12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f12:	b480      	push	{r7}
 8000f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f16:	e7fe      	b.n	8000f16 <HardFault_Handler+0x4>

08000f18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f1c:	e7fe      	b.n	8000f1c <MemManage_Handler+0x4>

08000f1e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f22:	e7fe      	b.n	8000f22 <BusFault_Handler+0x4>

08000f24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f28:	e7fe      	b.n	8000f28 <UsageFault_Handler+0x4>

08000f2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bc80      	pop	{r7}
 8000f34:	4770      	bx	lr

08000f36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f36:	b480      	push	{r7}
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bc80      	pop	{r7}
 8000f40:	4770      	bx	lr

08000f42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f42:	b480      	push	{r7}
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bc80      	pop	{r7}
 8000f4c:	4770      	bx	lr

08000f4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f52:	f000 f875 	bl	8001040 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f5e:	bf00      	nop
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bc80      	pop	{r7}
 8000f64:	4770      	bx	lr
	...

08000f68 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f68:	f7ff fff7 	bl	8000f5a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f6c:	480b      	ldr	r0, [pc, #44]	; (8000f9c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000f6e:	490c      	ldr	r1, [pc, #48]	; (8000fa0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000f70:	4a0c      	ldr	r2, [pc, #48]	; (8000fa4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000f72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f74:	e002      	b.n	8000f7c <LoopCopyDataInit>

08000f76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f7a:	3304      	adds	r3, #4

08000f7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f80:	d3f9      	bcc.n	8000f76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f82:	4a09      	ldr	r2, [pc, #36]	; (8000fa8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000f84:	4c09      	ldr	r4, [pc, #36]	; (8000fac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f88:	e001      	b.n	8000f8e <LoopFillZerobss>

08000f8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f8c:	3204      	adds	r2, #4

08000f8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f90:	d3fb      	bcc.n	8000f8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f92:	f000 ff17 	bl	8001dc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f96:	f7ff feaf 	bl	8000cf8 <main>
  bx lr
 8000f9a:	4770      	bx	lr
  ldr r0, =_sdata
 8000f9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fa0:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000fa4:	08001e60 	.word	0x08001e60
  ldr r2, =_sbss
 8000fa8:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000fac:	20000040 	.word	0x20000040

08000fb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fb0:	e7fe      	b.n	8000fb0 <ADC1_2_IRQHandler>
	...

08000fb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fb8:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <HAL_Init+0x28>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a07      	ldr	r2, [pc, #28]	; (8000fdc <HAL_Init+0x28>)
 8000fbe:	f043 0310 	orr.w	r3, r3, #16
 8000fc2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc4:	2003      	movs	r0, #3
 8000fc6:	f000 f92b 	bl	8001220 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fca:	200f      	movs	r0, #15
 8000fcc:	f000 f808 	bl	8000fe0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fd0:	f7ff ff6a 	bl	8000ea8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40022000 	.word	0x40022000

08000fe0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fe8:	4b12      	ldr	r3, [pc, #72]	; (8001034 <HAL_InitTick+0x54>)
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	4b12      	ldr	r3, [pc, #72]	; (8001038 <HAL_InitTick+0x58>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ffe:	4618      	mov	r0, r3
 8001000:	f000 f935 	bl	800126e <HAL_SYSTICK_Config>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e00e      	b.n	800102c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2b0f      	cmp	r3, #15
 8001012:	d80a      	bhi.n	800102a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001014:	2200      	movs	r2, #0
 8001016:	6879      	ldr	r1, [r7, #4]
 8001018:	f04f 30ff 	mov.w	r0, #4294967295
 800101c:	f000 f90b 	bl	8001236 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001020:	4a06      	ldr	r2, [pc, #24]	; (800103c <HAL_InitTick+0x5c>)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001026:	2300      	movs	r3, #0
 8001028:	e000      	b.n	800102c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
}
 800102c:	4618      	mov	r0, r3
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	2000000c 	.word	0x2000000c
 8001038:	20000014 	.word	0x20000014
 800103c:	20000010 	.word	0x20000010

08001040 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001044:	4b05      	ldr	r3, [pc, #20]	; (800105c <HAL_IncTick+0x1c>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	461a      	mov	r2, r3
 800104a:	4b05      	ldr	r3, [pc, #20]	; (8001060 <HAL_IncTick+0x20>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4413      	add	r3, r2
 8001050:	4a03      	ldr	r2, [pc, #12]	; (8001060 <HAL_IncTick+0x20>)
 8001052:	6013      	str	r3, [r2, #0]
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	bc80      	pop	{r7}
 800105a:	4770      	bx	lr
 800105c:	20000014 	.word	0x20000014
 8001060:	2000003c 	.word	0x2000003c

08001064 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  return uwTick;
 8001068:	4b02      	ldr	r3, [pc, #8]	; (8001074 <HAL_GetTick+0x10>)
 800106a:	681b      	ldr	r3, [r3, #0]
}
 800106c:	4618      	mov	r0, r3
 800106e:	46bd      	mov	sp, r7
 8001070:	bc80      	pop	{r7}
 8001072:	4770      	bx	lr
 8001074:	2000003c 	.word	0x2000003c

08001078 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001080:	f7ff fff0 	bl	8001064 <HAL_GetTick>
 8001084:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001090:	d005      	beq.n	800109e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001092:	4b0a      	ldr	r3, [pc, #40]	; (80010bc <HAL_Delay+0x44>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	461a      	mov	r2, r3
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	4413      	add	r3, r2
 800109c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800109e:	bf00      	nop
 80010a0:	f7ff ffe0 	bl	8001064 <HAL_GetTick>
 80010a4:	4602      	mov	r2, r0
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	68fa      	ldr	r2, [r7, #12]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d8f7      	bhi.n	80010a0 <HAL_Delay+0x28>
  {
  }
}
 80010b0:	bf00      	nop
 80010b2:	bf00      	nop
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000014 	.word	0x20000014

080010c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d0:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <__NVIC_SetPriorityGrouping+0x44>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010d6:	68ba      	ldr	r2, [r7, #8]
 80010d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010dc:	4013      	ands	r3, r2
 80010de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010f2:	4a04      	ldr	r2, [pc, #16]	; (8001104 <__NVIC_SetPriorityGrouping+0x44>)
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	60d3      	str	r3, [r2, #12]
}
 80010f8:	bf00      	nop
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bc80      	pop	{r7}
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800110c:	4b04      	ldr	r3, [pc, #16]	; (8001120 <__NVIC_GetPriorityGrouping+0x18>)
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	0a1b      	lsrs	r3, r3, #8
 8001112:	f003 0307 	and.w	r3, r3, #7
}
 8001116:	4618      	mov	r0, r3
 8001118:	46bd      	mov	sp, r7
 800111a:	bc80      	pop	{r7}
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	6039      	str	r1, [r7, #0]
 800112e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001134:	2b00      	cmp	r3, #0
 8001136:	db0a      	blt.n	800114e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	b2da      	uxtb	r2, r3
 800113c:	490c      	ldr	r1, [pc, #48]	; (8001170 <__NVIC_SetPriority+0x4c>)
 800113e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001142:	0112      	lsls	r2, r2, #4
 8001144:	b2d2      	uxtb	r2, r2
 8001146:	440b      	add	r3, r1
 8001148:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800114c:	e00a      	b.n	8001164 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	b2da      	uxtb	r2, r3
 8001152:	4908      	ldr	r1, [pc, #32]	; (8001174 <__NVIC_SetPriority+0x50>)
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	f003 030f 	and.w	r3, r3, #15
 800115a:	3b04      	subs	r3, #4
 800115c:	0112      	lsls	r2, r2, #4
 800115e:	b2d2      	uxtb	r2, r2
 8001160:	440b      	add	r3, r1
 8001162:	761a      	strb	r2, [r3, #24]
}
 8001164:	bf00      	nop
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	bc80      	pop	{r7}
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	e000e100 	.word	0xe000e100
 8001174:	e000ed00 	.word	0xe000ed00

08001178 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001178:	b480      	push	{r7}
 800117a:	b089      	sub	sp, #36	; 0x24
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	f003 0307 	and.w	r3, r3, #7
 800118a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	f1c3 0307 	rsb	r3, r3, #7
 8001192:	2b04      	cmp	r3, #4
 8001194:	bf28      	it	cs
 8001196:	2304      	movcs	r3, #4
 8001198:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	3304      	adds	r3, #4
 800119e:	2b06      	cmp	r3, #6
 80011a0:	d902      	bls.n	80011a8 <NVIC_EncodePriority+0x30>
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	3b03      	subs	r3, #3
 80011a6:	e000      	b.n	80011aa <NVIC_EncodePriority+0x32>
 80011a8:	2300      	movs	r3, #0
 80011aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011ac:	f04f 32ff 	mov.w	r2, #4294967295
 80011b0:	69bb      	ldr	r3, [r7, #24]
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	43da      	mvns	r2, r3
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	401a      	ands	r2, r3
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011c0:	f04f 31ff 	mov.w	r1, #4294967295
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ca:	43d9      	mvns	r1, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d0:	4313      	orrs	r3, r2
         );
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3724      	adds	r7, #36	; 0x24
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bc80      	pop	{r7}
 80011da:	4770      	bx	lr

080011dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	3b01      	subs	r3, #1
 80011e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011ec:	d301      	bcc.n	80011f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ee:	2301      	movs	r3, #1
 80011f0:	e00f      	b.n	8001212 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011f2:	4a0a      	ldr	r2, [pc, #40]	; (800121c <SysTick_Config+0x40>)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3b01      	subs	r3, #1
 80011f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011fa:	210f      	movs	r1, #15
 80011fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001200:	f7ff ff90 	bl	8001124 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001204:	4b05      	ldr	r3, [pc, #20]	; (800121c <SysTick_Config+0x40>)
 8001206:	2200      	movs	r2, #0
 8001208:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800120a:	4b04      	ldr	r3, [pc, #16]	; (800121c <SysTick_Config+0x40>)
 800120c:	2207      	movs	r2, #7
 800120e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001210:	2300      	movs	r3, #0
}
 8001212:	4618      	mov	r0, r3
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	e000e010 	.word	0xe000e010

08001220 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f7ff ff49 	bl	80010c0 <__NVIC_SetPriorityGrouping>
}
 800122e:	bf00      	nop
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001236:	b580      	push	{r7, lr}
 8001238:	b086      	sub	sp, #24
 800123a:	af00      	add	r7, sp, #0
 800123c:	4603      	mov	r3, r0
 800123e:	60b9      	str	r1, [r7, #8]
 8001240:	607a      	str	r2, [r7, #4]
 8001242:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001248:	f7ff ff5e 	bl	8001108 <__NVIC_GetPriorityGrouping>
 800124c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	68b9      	ldr	r1, [r7, #8]
 8001252:	6978      	ldr	r0, [r7, #20]
 8001254:	f7ff ff90 	bl	8001178 <NVIC_EncodePriority>
 8001258:	4602      	mov	r2, r0
 800125a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800125e:	4611      	mov	r1, r2
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff ff5f 	bl	8001124 <__NVIC_SetPriority>
}
 8001266:	bf00      	nop
 8001268:	3718      	adds	r7, #24
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	b082      	sub	sp, #8
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f7ff ffb0 	bl	80011dc <SysTick_Config>
 800127c:	4603      	mov	r3, r0
}
 800127e:	4618      	mov	r0, r3
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
	...

08001288 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001288:	b480      	push	{r7}
 800128a:	b08b      	sub	sp, #44	; 0x2c
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001292:	2300      	movs	r3, #0
 8001294:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001296:	2300      	movs	r3, #0
 8001298:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800129a:	e148      	b.n	800152e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800129c:	2201      	movs	r2, #1
 800129e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	69fa      	ldr	r2, [r7, #28]
 80012ac:	4013      	ands	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	f040 8137 	bne.w	8001528 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	4aa3      	ldr	r2, [pc, #652]	; (800154c <HAL_GPIO_Init+0x2c4>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d05e      	beq.n	8001382 <HAL_GPIO_Init+0xfa>
 80012c4:	4aa1      	ldr	r2, [pc, #644]	; (800154c <HAL_GPIO_Init+0x2c4>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d875      	bhi.n	80013b6 <HAL_GPIO_Init+0x12e>
 80012ca:	4aa1      	ldr	r2, [pc, #644]	; (8001550 <HAL_GPIO_Init+0x2c8>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d058      	beq.n	8001382 <HAL_GPIO_Init+0xfa>
 80012d0:	4a9f      	ldr	r2, [pc, #636]	; (8001550 <HAL_GPIO_Init+0x2c8>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d86f      	bhi.n	80013b6 <HAL_GPIO_Init+0x12e>
 80012d6:	4a9f      	ldr	r2, [pc, #636]	; (8001554 <HAL_GPIO_Init+0x2cc>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d052      	beq.n	8001382 <HAL_GPIO_Init+0xfa>
 80012dc:	4a9d      	ldr	r2, [pc, #628]	; (8001554 <HAL_GPIO_Init+0x2cc>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d869      	bhi.n	80013b6 <HAL_GPIO_Init+0x12e>
 80012e2:	4a9d      	ldr	r2, [pc, #628]	; (8001558 <HAL_GPIO_Init+0x2d0>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d04c      	beq.n	8001382 <HAL_GPIO_Init+0xfa>
 80012e8:	4a9b      	ldr	r2, [pc, #620]	; (8001558 <HAL_GPIO_Init+0x2d0>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d863      	bhi.n	80013b6 <HAL_GPIO_Init+0x12e>
 80012ee:	4a9b      	ldr	r2, [pc, #620]	; (800155c <HAL_GPIO_Init+0x2d4>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d046      	beq.n	8001382 <HAL_GPIO_Init+0xfa>
 80012f4:	4a99      	ldr	r2, [pc, #612]	; (800155c <HAL_GPIO_Init+0x2d4>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d85d      	bhi.n	80013b6 <HAL_GPIO_Init+0x12e>
 80012fa:	2b12      	cmp	r3, #18
 80012fc:	d82a      	bhi.n	8001354 <HAL_GPIO_Init+0xcc>
 80012fe:	2b12      	cmp	r3, #18
 8001300:	d859      	bhi.n	80013b6 <HAL_GPIO_Init+0x12e>
 8001302:	a201      	add	r2, pc, #4	; (adr r2, 8001308 <HAL_GPIO_Init+0x80>)
 8001304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001308:	08001383 	.word	0x08001383
 800130c:	0800135d 	.word	0x0800135d
 8001310:	0800136f 	.word	0x0800136f
 8001314:	080013b1 	.word	0x080013b1
 8001318:	080013b7 	.word	0x080013b7
 800131c:	080013b7 	.word	0x080013b7
 8001320:	080013b7 	.word	0x080013b7
 8001324:	080013b7 	.word	0x080013b7
 8001328:	080013b7 	.word	0x080013b7
 800132c:	080013b7 	.word	0x080013b7
 8001330:	080013b7 	.word	0x080013b7
 8001334:	080013b7 	.word	0x080013b7
 8001338:	080013b7 	.word	0x080013b7
 800133c:	080013b7 	.word	0x080013b7
 8001340:	080013b7 	.word	0x080013b7
 8001344:	080013b7 	.word	0x080013b7
 8001348:	080013b7 	.word	0x080013b7
 800134c:	08001365 	.word	0x08001365
 8001350:	08001379 	.word	0x08001379
 8001354:	4a82      	ldr	r2, [pc, #520]	; (8001560 <HAL_GPIO_Init+0x2d8>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d013      	beq.n	8001382 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800135a:	e02c      	b.n	80013b6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	623b      	str	r3, [r7, #32]
          break;
 8001362:	e029      	b.n	80013b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	3304      	adds	r3, #4
 800136a:	623b      	str	r3, [r7, #32]
          break;
 800136c:	e024      	b.n	80013b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	68db      	ldr	r3, [r3, #12]
 8001372:	3308      	adds	r3, #8
 8001374:	623b      	str	r3, [r7, #32]
          break;
 8001376:	e01f      	b.n	80013b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	330c      	adds	r3, #12
 800137e:	623b      	str	r3, [r7, #32]
          break;
 8001380:	e01a      	b.n	80013b8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d102      	bne.n	8001390 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800138a:	2304      	movs	r3, #4
 800138c:	623b      	str	r3, [r7, #32]
          break;
 800138e:	e013      	b.n	80013b8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	2b01      	cmp	r3, #1
 8001396:	d105      	bne.n	80013a4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001398:	2308      	movs	r3, #8
 800139a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	69fa      	ldr	r2, [r7, #28]
 80013a0:	611a      	str	r2, [r3, #16]
          break;
 80013a2:	e009      	b.n	80013b8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013a4:	2308      	movs	r3, #8
 80013a6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	69fa      	ldr	r2, [r7, #28]
 80013ac:	615a      	str	r2, [r3, #20]
          break;
 80013ae:	e003      	b.n	80013b8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013b0:	2300      	movs	r3, #0
 80013b2:	623b      	str	r3, [r7, #32]
          break;
 80013b4:	e000      	b.n	80013b8 <HAL_GPIO_Init+0x130>
          break;
 80013b6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	2bff      	cmp	r3, #255	; 0xff
 80013bc:	d801      	bhi.n	80013c2 <HAL_GPIO_Init+0x13a>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	e001      	b.n	80013c6 <HAL_GPIO_Init+0x13e>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	3304      	adds	r3, #4
 80013c6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	2bff      	cmp	r3, #255	; 0xff
 80013cc:	d802      	bhi.n	80013d4 <HAL_GPIO_Init+0x14c>
 80013ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	e002      	b.n	80013da <HAL_GPIO_Init+0x152>
 80013d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d6:	3b08      	subs	r3, #8
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	210f      	movs	r1, #15
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	fa01 f303 	lsl.w	r3, r1, r3
 80013e8:	43db      	mvns	r3, r3
 80013ea:	401a      	ands	r2, r3
 80013ec:	6a39      	ldr	r1, [r7, #32]
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	fa01 f303 	lsl.w	r3, r1, r3
 80013f4:	431a      	orrs	r2, r3
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001402:	2b00      	cmp	r3, #0
 8001404:	f000 8090 	beq.w	8001528 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001408:	4b56      	ldr	r3, [pc, #344]	; (8001564 <HAL_GPIO_Init+0x2dc>)
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	4a55      	ldr	r2, [pc, #340]	; (8001564 <HAL_GPIO_Init+0x2dc>)
 800140e:	f043 0301 	orr.w	r3, r3, #1
 8001412:	6193      	str	r3, [r2, #24]
 8001414:	4b53      	ldr	r3, [pc, #332]	; (8001564 <HAL_GPIO_Init+0x2dc>)
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	f003 0301 	and.w	r3, r3, #1
 800141c:	60bb      	str	r3, [r7, #8]
 800141e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001420:	4a51      	ldr	r2, [pc, #324]	; (8001568 <HAL_GPIO_Init+0x2e0>)
 8001422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001424:	089b      	lsrs	r3, r3, #2
 8001426:	3302      	adds	r3, #2
 8001428:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800142c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800142e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001430:	f003 0303 	and.w	r3, r3, #3
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	220f      	movs	r2, #15
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	43db      	mvns	r3, r3
 800143e:	68fa      	ldr	r2, [r7, #12]
 8001440:	4013      	ands	r3, r2
 8001442:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	4a49      	ldr	r2, [pc, #292]	; (800156c <HAL_GPIO_Init+0x2e4>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d00d      	beq.n	8001468 <HAL_GPIO_Init+0x1e0>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	4a48      	ldr	r2, [pc, #288]	; (8001570 <HAL_GPIO_Init+0x2e8>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d007      	beq.n	8001464 <HAL_GPIO_Init+0x1dc>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	4a47      	ldr	r2, [pc, #284]	; (8001574 <HAL_GPIO_Init+0x2ec>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d101      	bne.n	8001460 <HAL_GPIO_Init+0x1d8>
 800145c:	2302      	movs	r3, #2
 800145e:	e004      	b.n	800146a <HAL_GPIO_Init+0x1e2>
 8001460:	2303      	movs	r3, #3
 8001462:	e002      	b.n	800146a <HAL_GPIO_Init+0x1e2>
 8001464:	2301      	movs	r3, #1
 8001466:	e000      	b.n	800146a <HAL_GPIO_Init+0x1e2>
 8001468:	2300      	movs	r3, #0
 800146a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800146c:	f002 0203 	and.w	r2, r2, #3
 8001470:	0092      	lsls	r2, r2, #2
 8001472:	4093      	lsls	r3, r2
 8001474:	68fa      	ldr	r2, [r7, #12]
 8001476:	4313      	orrs	r3, r2
 8001478:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800147a:	493b      	ldr	r1, [pc, #236]	; (8001568 <HAL_GPIO_Init+0x2e0>)
 800147c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147e:	089b      	lsrs	r3, r3, #2
 8001480:	3302      	adds	r3, #2
 8001482:	68fa      	ldr	r2, [r7, #12]
 8001484:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d006      	beq.n	80014a2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001494:	4b38      	ldr	r3, [pc, #224]	; (8001578 <HAL_GPIO_Init+0x2f0>)
 8001496:	689a      	ldr	r2, [r3, #8]
 8001498:	4937      	ldr	r1, [pc, #220]	; (8001578 <HAL_GPIO_Init+0x2f0>)
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	4313      	orrs	r3, r2
 800149e:	608b      	str	r3, [r1, #8]
 80014a0:	e006      	b.n	80014b0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80014a2:	4b35      	ldr	r3, [pc, #212]	; (8001578 <HAL_GPIO_Init+0x2f0>)
 80014a4:	689a      	ldr	r2, [r3, #8]
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	43db      	mvns	r3, r3
 80014aa:	4933      	ldr	r1, [pc, #204]	; (8001578 <HAL_GPIO_Init+0x2f0>)
 80014ac:	4013      	ands	r3, r2
 80014ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d006      	beq.n	80014ca <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80014bc:	4b2e      	ldr	r3, [pc, #184]	; (8001578 <HAL_GPIO_Init+0x2f0>)
 80014be:	68da      	ldr	r2, [r3, #12]
 80014c0:	492d      	ldr	r1, [pc, #180]	; (8001578 <HAL_GPIO_Init+0x2f0>)
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	60cb      	str	r3, [r1, #12]
 80014c8:	e006      	b.n	80014d8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014ca:	4b2b      	ldr	r3, [pc, #172]	; (8001578 <HAL_GPIO_Init+0x2f0>)
 80014cc:	68da      	ldr	r2, [r3, #12]
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	43db      	mvns	r3, r3
 80014d2:	4929      	ldr	r1, [pc, #164]	; (8001578 <HAL_GPIO_Init+0x2f0>)
 80014d4:	4013      	ands	r3, r2
 80014d6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d006      	beq.n	80014f2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014e4:	4b24      	ldr	r3, [pc, #144]	; (8001578 <HAL_GPIO_Init+0x2f0>)
 80014e6:	685a      	ldr	r2, [r3, #4]
 80014e8:	4923      	ldr	r1, [pc, #140]	; (8001578 <HAL_GPIO_Init+0x2f0>)
 80014ea:	69bb      	ldr	r3, [r7, #24]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	604b      	str	r3, [r1, #4]
 80014f0:	e006      	b.n	8001500 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014f2:	4b21      	ldr	r3, [pc, #132]	; (8001578 <HAL_GPIO_Init+0x2f0>)
 80014f4:	685a      	ldr	r2, [r3, #4]
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	43db      	mvns	r3, r3
 80014fa:	491f      	ldr	r1, [pc, #124]	; (8001578 <HAL_GPIO_Init+0x2f0>)
 80014fc:	4013      	ands	r3, r2
 80014fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001508:	2b00      	cmp	r3, #0
 800150a:	d006      	beq.n	800151a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800150c:	4b1a      	ldr	r3, [pc, #104]	; (8001578 <HAL_GPIO_Init+0x2f0>)
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	4919      	ldr	r1, [pc, #100]	; (8001578 <HAL_GPIO_Init+0x2f0>)
 8001512:	69bb      	ldr	r3, [r7, #24]
 8001514:	4313      	orrs	r3, r2
 8001516:	600b      	str	r3, [r1, #0]
 8001518:	e006      	b.n	8001528 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800151a:	4b17      	ldr	r3, [pc, #92]	; (8001578 <HAL_GPIO_Init+0x2f0>)
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	43db      	mvns	r3, r3
 8001522:	4915      	ldr	r1, [pc, #84]	; (8001578 <HAL_GPIO_Init+0x2f0>)
 8001524:	4013      	ands	r3, r2
 8001526:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152a:	3301      	adds	r3, #1
 800152c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001534:	fa22 f303 	lsr.w	r3, r2, r3
 8001538:	2b00      	cmp	r3, #0
 800153a:	f47f aeaf 	bne.w	800129c <HAL_GPIO_Init+0x14>
  }
}
 800153e:	bf00      	nop
 8001540:	bf00      	nop
 8001542:	372c      	adds	r7, #44	; 0x2c
 8001544:	46bd      	mov	sp, r7
 8001546:	bc80      	pop	{r7}
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	10320000 	.word	0x10320000
 8001550:	10310000 	.word	0x10310000
 8001554:	10220000 	.word	0x10220000
 8001558:	10210000 	.word	0x10210000
 800155c:	10120000 	.word	0x10120000
 8001560:	10110000 	.word	0x10110000
 8001564:	40021000 	.word	0x40021000
 8001568:	40010000 	.word	0x40010000
 800156c:	40010800 	.word	0x40010800
 8001570:	40010c00 	.word	0x40010c00
 8001574:	40011000 	.word	0x40011000
 8001578:	40010400 	.word	0x40010400

0800157c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	460b      	mov	r3, r1
 8001586:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	689a      	ldr	r2, [r3, #8]
 800158c:	887b      	ldrh	r3, [r7, #2]
 800158e:	4013      	ands	r3, r2
 8001590:	2b00      	cmp	r3, #0
 8001592:	d002      	beq.n	800159a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001594:	2301      	movs	r3, #1
 8001596:	73fb      	strb	r3, [r7, #15]
 8001598:	e001      	b.n	800159e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800159a:	2300      	movs	r3, #0
 800159c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800159e:	7bfb      	ldrb	r3, [r7, #15]
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3714      	adds	r7, #20
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bc80      	pop	{r7}
 80015a8:	4770      	bx	lr

080015aa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015aa:	b480      	push	{r7}
 80015ac:	b083      	sub	sp, #12
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
 80015b2:	460b      	mov	r3, r1
 80015b4:	807b      	strh	r3, [r7, #2]
 80015b6:	4613      	mov	r3, r2
 80015b8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015ba:	787b      	ldrb	r3, [r7, #1]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d003      	beq.n	80015c8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015c0:	887a      	ldrh	r2, [r7, #2]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80015c6:	e003      	b.n	80015d0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80015c8:	887b      	ldrh	r3, [r7, #2]
 80015ca:	041a      	lsls	r2, r3, #16
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	611a      	str	r2, [r3, #16]
}
 80015d0:	bf00      	nop
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bc80      	pop	{r7}
 80015d8:	4770      	bx	lr

080015da <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80015da:	b480      	push	{r7}
 80015dc:	b085      	sub	sp, #20
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
 80015e2:	460b      	mov	r3, r1
 80015e4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	68db      	ldr	r3, [r3, #12]
 80015ea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015ec:	887a      	ldrh	r2, [r7, #2]
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	4013      	ands	r3, r2
 80015f2:	041a      	lsls	r2, r3, #16
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	43d9      	mvns	r1, r3
 80015f8:	887b      	ldrh	r3, [r7, #2]
 80015fa:	400b      	ands	r3, r1
 80015fc:	431a      	orrs	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	611a      	str	r2, [r3, #16]
}
 8001602:	bf00      	nop
 8001604:	3714      	adds	r7, #20
 8001606:	46bd      	mov	sp, r7
 8001608:	bc80      	pop	{r7}
 800160a:	4770      	bx	lr

0800160c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b086      	sub	sp, #24
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d101      	bne.n	800161e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e26c      	b.n	8001af8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	2b00      	cmp	r3, #0
 8001628:	f000 8087 	beq.w	800173a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800162c:	4b92      	ldr	r3, [pc, #584]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f003 030c 	and.w	r3, r3, #12
 8001634:	2b04      	cmp	r3, #4
 8001636:	d00c      	beq.n	8001652 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001638:	4b8f      	ldr	r3, [pc, #572]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f003 030c 	and.w	r3, r3, #12
 8001640:	2b08      	cmp	r3, #8
 8001642:	d112      	bne.n	800166a <HAL_RCC_OscConfig+0x5e>
 8001644:	4b8c      	ldr	r3, [pc, #560]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800164c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001650:	d10b      	bne.n	800166a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001652:	4b89      	ldr	r3, [pc, #548]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d06c      	beq.n	8001738 <HAL_RCC_OscConfig+0x12c>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d168      	bne.n	8001738 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e246      	b.n	8001af8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001672:	d106      	bne.n	8001682 <HAL_RCC_OscConfig+0x76>
 8001674:	4b80      	ldr	r3, [pc, #512]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a7f      	ldr	r2, [pc, #508]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 800167a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800167e:	6013      	str	r3, [r2, #0]
 8001680:	e02e      	b.n	80016e0 <HAL_RCC_OscConfig+0xd4>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d10c      	bne.n	80016a4 <HAL_RCC_OscConfig+0x98>
 800168a:	4b7b      	ldr	r3, [pc, #492]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a7a      	ldr	r2, [pc, #488]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 8001690:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001694:	6013      	str	r3, [r2, #0]
 8001696:	4b78      	ldr	r3, [pc, #480]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a77      	ldr	r2, [pc, #476]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 800169c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016a0:	6013      	str	r3, [r2, #0]
 80016a2:	e01d      	b.n	80016e0 <HAL_RCC_OscConfig+0xd4>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016ac:	d10c      	bne.n	80016c8 <HAL_RCC_OscConfig+0xbc>
 80016ae:	4b72      	ldr	r3, [pc, #456]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a71      	ldr	r2, [pc, #452]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 80016b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016b8:	6013      	str	r3, [r2, #0]
 80016ba:	4b6f      	ldr	r3, [pc, #444]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a6e      	ldr	r2, [pc, #440]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 80016c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016c4:	6013      	str	r3, [r2, #0]
 80016c6:	e00b      	b.n	80016e0 <HAL_RCC_OscConfig+0xd4>
 80016c8:	4b6b      	ldr	r3, [pc, #428]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a6a      	ldr	r2, [pc, #424]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 80016ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016d2:	6013      	str	r3, [r2, #0]
 80016d4:	4b68      	ldr	r3, [pc, #416]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a67      	ldr	r2, [pc, #412]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 80016da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016de:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d013      	beq.n	8001710 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e8:	f7ff fcbc 	bl	8001064 <HAL_GetTick>
 80016ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ee:	e008      	b.n	8001702 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016f0:	f7ff fcb8 	bl	8001064 <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	2b64      	cmp	r3, #100	; 0x64
 80016fc:	d901      	bls.n	8001702 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e1fa      	b.n	8001af8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001702:	4b5d      	ldr	r3, [pc, #372]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d0f0      	beq.n	80016f0 <HAL_RCC_OscConfig+0xe4>
 800170e:	e014      	b.n	800173a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001710:	f7ff fca8 	bl	8001064 <HAL_GetTick>
 8001714:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001716:	e008      	b.n	800172a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001718:	f7ff fca4 	bl	8001064 <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	2b64      	cmp	r3, #100	; 0x64
 8001724:	d901      	bls.n	800172a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e1e6      	b.n	8001af8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800172a:	4b53      	ldr	r3, [pc, #332]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d1f0      	bne.n	8001718 <HAL_RCC_OscConfig+0x10c>
 8001736:	e000      	b.n	800173a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001738:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0302 	and.w	r3, r3, #2
 8001742:	2b00      	cmp	r3, #0
 8001744:	d063      	beq.n	800180e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001746:	4b4c      	ldr	r3, [pc, #304]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f003 030c 	and.w	r3, r3, #12
 800174e:	2b00      	cmp	r3, #0
 8001750:	d00b      	beq.n	800176a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001752:	4b49      	ldr	r3, [pc, #292]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f003 030c 	and.w	r3, r3, #12
 800175a:	2b08      	cmp	r3, #8
 800175c:	d11c      	bne.n	8001798 <HAL_RCC_OscConfig+0x18c>
 800175e:	4b46      	ldr	r3, [pc, #280]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d116      	bne.n	8001798 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800176a:	4b43      	ldr	r3, [pc, #268]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0302 	and.w	r3, r3, #2
 8001772:	2b00      	cmp	r3, #0
 8001774:	d005      	beq.n	8001782 <HAL_RCC_OscConfig+0x176>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	691b      	ldr	r3, [r3, #16]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d001      	beq.n	8001782 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e1ba      	b.n	8001af8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001782:	4b3d      	ldr	r3, [pc, #244]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	695b      	ldr	r3, [r3, #20]
 800178e:	00db      	lsls	r3, r3, #3
 8001790:	4939      	ldr	r1, [pc, #228]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 8001792:	4313      	orrs	r3, r2
 8001794:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001796:	e03a      	b.n	800180e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	691b      	ldr	r3, [r3, #16]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d020      	beq.n	80017e2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017a0:	4b36      	ldr	r3, [pc, #216]	; (800187c <HAL_RCC_OscConfig+0x270>)
 80017a2:	2201      	movs	r2, #1
 80017a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a6:	f7ff fc5d 	bl	8001064 <HAL_GetTick>
 80017aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ac:	e008      	b.n	80017c0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017ae:	f7ff fc59 	bl	8001064 <HAL_GetTick>
 80017b2:	4602      	mov	r2, r0
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d901      	bls.n	80017c0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80017bc:	2303      	movs	r3, #3
 80017be:	e19b      	b.n	8001af8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017c0:	4b2d      	ldr	r3, [pc, #180]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0302 	and.w	r3, r3, #2
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d0f0      	beq.n	80017ae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017cc:	4b2a      	ldr	r3, [pc, #168]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	695b      	ldr	r3, [r3, #20]
 80017d8:	00db      	lsls	r3, r3, #3
 80017da:	4927      	ldr	r1, [pc, #156]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 80017dc:	4313      	orrs	r3, r2
 80017de:	600b      	str	r3, [r1, #0]
 80017e0:	e015      	b.n	800180e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017e2:	4b26      	ldr	r3, [pc, #152]	; (800187c <HAL_RCC_OscConfig+0x270>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e8:	f7ff fc3c 	bl	8001064 <HAL_GetTick>
 80017ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ee:	e008      	b.n	8001802 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017f0:	f7ff fc38 	bl	8001064 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e17a      	b.n	8001af8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001802:	4b1d      	ldr	r3, [pc, #116]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	2b00      	cmp	r3, #0
 800180c:	d1f0      	bne.n	80017f0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0308 	and.w	r3, r3, #8
 8001816:	2b00      	cmp	r3, #0
 8001818:	d03a      	beq.n	8001890 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	699b      	ldr	r3, [r3, #24]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d019      	beq.n	8001856 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001822:	4b17      	ldr	r3, [pc, #92]	; (8001880 <HAL_RCC_OscConfig+0x274>)
 8001824:	2201      	movs	r2, #1
 8001826:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001828:	f7ff fc1c 	bl	8001064 <HAL_GetTick>
 800182c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800182e:	e008      	b.n	8001842 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001830:	f7ff fc18 	bl	8001064 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	2b02      	cmp	r3, #2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e15a      	b.n	8001af8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001842:	4b0d      	ldr	r3, [pc, #52]	; (8001878 <HAL_RCC_OscConfig+0x26c>)
 8001844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	2b00      	cmp	r3, #0
 800184c:	d0f0      	beq.n	8001830 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800184e:	2001      	movs	r0, #1
 8001850:	f000 fa9a 	bl	8001d88 <RCC_Delay>
 8001854:	e01c      	b.n	8001890 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001856:	4b0a      	ldr	r3, [pc, #40]	; (8001880 <HAL_RCC_OscConfig+0x274>)
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800185c:	f7ff fc02 	bl	8001064 <HAL_GetTick>
 8001860:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001862:	e00f      	b.n	8001884 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001864:	f7ff fbfe 	bl	8001064 <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d908      	bls.n	8001884 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e140      	b.n	8001af8 <HAL_RCC_OscConfig+0x4ec>
 8001876:	bf00      	nop
 8001878:	40021000 	.word	0x40021000
 800187c:	42420000 	.word	0x42420000
 8001880:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001884:	4b9e      	ldr	r3, [pc, #632]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 8001886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001888:	f003 0302 	and.w	r3, r3, #2
 800188c:	2b00      	cmp	r3, #0
 800188e:	d1e9      	bne.n	8001864 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0304 	and.w	r3, r3, #4
 8001898:	2b00      	cmp	r3, #0
 800189a:	f000 80a6 	beq.w	80019ea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800189e:	2300      	movs	r3, #0
 80018a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018a2:	4b97      	ldr	r3, [pc, #604]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 80018a4:	69db      	ldr	r3, [r3, #28]
 80018a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d10d      	bne.n	80018ca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018ae:	4b94      	ldr	r3, [pc, #592]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 80018b0:	69db      	ldr	r3, [r3, #28]
 80018b2:	4a93      	ldr	r2, [pc, #588]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 80018b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018b8:	61d3      	str	r3, [r2, #28]
 80018ba:	4b91      	ldr	r3, [pc, #580]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 80018bc:	69db      	ldr	r3, [r3, #28]
 80018be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c2:	60bb      	str	r3, [r7, #8]
 80018c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018c6:	2301      	movs	r3, #1
 80018c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ca:	4b8e      	ldr	r3, [pc, #568]	; (8001b04 <HAL_RCC_OscConfig+0x4f8>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d118      	bne.n	8001908 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018d6:	4b8b      	ldr	r3, [pc, #556]	; (8001b04 <HAL_RCC_OscConfig+0x4f8>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a8a      	ldr	r2, [pc, #552]	; (8001b04 <HAL_RCC_OscConfig+0x4f8>)
 80018dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018e2:	f7ff fbbf 	bl	8001064 <HAL_GetTick>
 80018e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018e8:	e008      	b.n	80018fc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018ea:	f7ff fbbb 	bl	8001064 <HAL_GetTick>
 80018ee:	4602      	mov	r2, r0
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	2b64      	cmp	r3, #100	; 0x64
 80018f6:	d901      	bls.n	80018fc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	e0fd      	b.n	8001af8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018fc:	4b81      	ldr	r3, [pc, #516]	; (8001b04 <HAL_RCC_OscConfig+0x4f8>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001904:	2b00      	cmp	r3, #0
 8001906:	d0f0      	beq.n	80018ea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d106      	bne.n	800191e <HAL_RCC_OscConfig+0x312>
 8001910:	4b7b      	ldr	r3, [pc, #492]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 8001912:	6a1b      	ldr	r3, [r3, #32]
 8001914:	4a7a      	ldr	r2, [pc, #488]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 8001916:	f043 0301 	orr.w	r3, r3, #1
 800191a:	6213      	str	r3, [r2, #32]
 800191c:	e02d      	b.n	800197a <HAL_RCC_OscConfig+0x36e>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	68db      	ldr	r3, [r3, #12]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d10c      	bne.n	8001940 <HAL_RCC_OscConfig+0x334>
 8001926:	4b76      	ldr	r3, [pc, #472]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 8001928:	6a1b      	ldr	r3, [r3, #32]
 800192a:	4a75      	ldr	r2, [pc, #468]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 800192c:	f023 0301 	bic.w	r3, r3, #1
 8001930:	6213      	str	r3, [r2, #32]
 8001932:	4b73      	ldr	r3, [pc, #460]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 8001934:	6a1b      	ldr	r3, [r3, #32]
 8001936:	4a72      	ldr	r2, [pc, #456]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 8001938:	f023 0304 	bic.w	r3, r3, #4
 800193c:	6213      	str	r3, [r2, #32]
 800193e:	e01c      	b.n	800197a <HAL_RCC_OscConfig+0x36e>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	2b05      	cmp	r3, #5
 8001946:	d10c      	bne.n	8001962 <HAL_RCC_OscConfig+0x356>
 8001948:	4b6d      	ldr	r3, [pc, #436]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 800194a:	6a1b      	ldr	r3, [r3, #32]
 800194c:	4a6c      	ldr	r2, [pc, #432]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 800194e:	f043 0304 	orr.w	r3, r3, #4
 8001952:	6213      	str	r3, [r2, #32]
 8001954:	4b6a      	ldr	r3, [pc, #424]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 8001956:	6a1b      	ldr	r3, [r3, #32]
 8001958:	4a69      	ldr	r2, [pc, #420]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 800195a:	f043 0301 	orr.w	r3, r3, #1
 800195e:	6213      	str	r3, [r2, #32]
 8001960:	e00b      	b.n	800197a <HAL_RCC_OscConfig+0x36e>
 8001962:	4b67      	ldr	r3, [pc, #412]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 8001964:	6a1b      	ldr	r3, [r3, #32]
 8001966:	4a66      	ldr	r2, [pc, #408]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 8001968:	f023 0301 	bic.w	r3, r3, #1
 800196c:	6213      	str	r3, [r2, #32]
 800196e:	4b64      	ldr	r3, [pc, #400]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 8001970:	6a1b      	ldr	r3, [r3, #32]
 8001972:	4a63      	ldr	r2, [pc, #396]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 8001974:	f023 0304 	bic.w	r3, r3, #4
 8001978:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d015      	beq.n	80019ae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001982:	f7ff fb6f 	bl	8001064 <HAL_GetTick>
 8001986:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001988:	e00a      	b.n	80019a0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800198a:	f7ff fb6b 	bl	8001064 <HAL_GetTick>
 800198e:	4602      	mov	r2, r0
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	f241 3288 	movw	r2, #5000	; 0x1388
 8001998:	4293      	cmp	r3, r2
 800199a:	d901      	bls.n	80019a0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800199c:	2303      	movs	r3, #3
 800199e:	e0ab      	b.n	8001af8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019a0:	4b57      	ldr	r3, [pc, #348]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 80019a2:	6a1b      	ldr	r3, [r3, #32]
 80019a4:	f003 0302 	and.w	r3, r3, #2
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d0ee      	beq.n	800198a <HAL_RCC_OscConfig+0x37e>
 80019ac:	e014      	b.n	80019d8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ae:	f7ff fb59 	bl	8001064 <HAL_GetTick>
 80019b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019b4:	e00a      	b.n	80019cc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019b6:	f7ff fb55 	bl	8001064 <HAL_GetTick>
 80019ba:	4602      	mov	r2, r0
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d901      	bls.n	80019cc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e095      	b.n	8001af8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019cc:	4b4c      	ldr	r3, [pc, #304]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 80019ce:	6a1b      	ldr	r3, [r3, #32]
 80019d0:	f003 0302 	and.w	r3, r3, #2
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d1ee      	bne.n	80019b6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80019d8:	7dfb      	ldrb	r3, [r7, #23]
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d105      	bne.n	80019ea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019de:	4b48      	ldr	r3, [pc, #288]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 80019e0:	69db      	ldr	r3, [r3, #28]
 80019e2:	4a47      	ldr	r2, [pc, #284]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 80019e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019e8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	69db      	ldr	r3, [r3, #28]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	f000 8081 	beq.w	8001af6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019f4:	4b42      	ldr	r3, [pc, #264]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f003 030c 	and.w	r3, r3, #12
 80019fc:	2b08      	cmp	r3, #8
 80019fe:	d061      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	69db      	ldr	r3, [r3, #28]
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d146      	bne.n	8001a96 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a08:	4b3f      	ldr	r3, [pc, #252]	; (8001b08 <HAL_RCC_OscConfig+0x4fc>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a0e:	f7ff fb29 	bl	8001064 <HAL_GetTick>
 8001a12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a14:	e008      	b.n	8001a28 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a16:	f7ff fb25 	bl	8001064 <HAL_GetTick>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d901      	bls.n	8001a28 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a24:	2303      	movs	r3, #3
 8001a26:	e067      	b.n	8001af8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a28:	4b35      	ldr	r3, [pc, #212]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d1f0      	bne.n	8001a16 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6a1b      	ldr	r3, [r3, #32]
 8001a38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a3c:	d108      	bne.n	8001a50 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a3e:	4b30      	ldr	r3, [pc, #192]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	492d      	ldr	r1, [pc, #180]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a50:	4b2b      	ldr	r3, [pc, #172]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6a19      	ldr	r1, [r3, #32]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a60:	430b      	orrs	r3, r1
 8001a62:	4927      	ldr	r1, [pc, #156]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 8001a64:	4313      	orrs	r3, r2
 8001a66:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a68:	4b27      	ldr	r3, [pc, #156]	; (8001b08 <HAL_RCC_OscConfig+0x4fc>)
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a6e:	f7ff faf9 	bl	8001064 <HAL_GetTick>
 8001a72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a74:	e008      	b.n	8001a88 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a76:	f7ff faf5 	bl	8001064 <HAL_GetTick>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d901      	bls.n	8001a88 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a84:	2303      	movs	r3, #3
 8001a86:	e037      	b.n	8001af8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a88:	4b1d      	ldr	r3, [pc, #116]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d0f0      	beq.n	8001a76 <HAL_RCC_OscConfig+0x46a>
 8001a94:	e02f      	b.n	8001af6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a96:	4b1c      	ldr	r3, [pc, #112]	; (8001b08 <HAL_RCC_OscConfig+0x4fc>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a9c:	f7ff fae2 	bl	8001064 <HAL_GetTick>
 8001aa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aa2:	e008      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aa4:	f7ff fade 	bl	8001064 <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e020      	b.n	8001af8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ab6:	4b12      	ldr	r3, [pc, #72]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d1f0      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x498>
 8001ac2:	e018      	b.n	8001af6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	69db      	ldr	r3, [r3, #28]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d101      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e013      	b.n	8001af8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ad0:	4b0b      	ldr	r3, [pc, #44]	; (8001b00 <HAL_RCC_OscConfig+0x4f4>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a1b      	ldr	r3, [r3, #32]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d106      	bne.n	8001af2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d001      	beq.n	8001af6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e000      	b.n	8001af8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001af6:	2300      	movs	r3, #0
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3718      	adds	r7, #24
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	40021000 	.word	0x40021000
 8001b04:	40007000 	.word	0x40007000
 8001b08:	42420060 	.word	0x42420060

08001b0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d101      	bne.n	8001b20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e0d0      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b20:	4b6a      	ldr	r3, [pc, #424]	; (8001ccc <HAL_RCC_ClockConfig+0x1c0>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0307 	and.w	r3, r3, #7
 8001b28:	683a      	ldr	r2, [r7, #0]
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d910      	bls.n	8001b50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b2e:	4b67      	ldr	r3, [pc, #412]	; (8001ccc <HAL_RCC_ClockConfig+0x1c0>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f023 0207 	bic.w	r2, r3, #7
 8001b36:	4965      	ldr	r1, [pc, #404]	; (8001ccc <HAL_RCC_ClockConfig+0x1c0>)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b3e:	4b63      	ldr	r3, [pc, #396]	; (8001ccc <HAL_RCC_ClockConfig+0x1c0>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0307 	and.w	r3, r3, #7
 8001b46:	683a      	ldr	r2, [r7, #0]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d001      	beq.n	8001b50 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e0b8      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d020      	beq.n	8001b9e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0304 	and.w	r3, r3, #4
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d005      	beq.n	8001b74 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b68:	4b59      	ldr	r3, [pc, #356]	; (8001cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	4a58      	ldr	r2, [pc, #352]	; (8001cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b6e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b72:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0308 	and.w	r3, r3, #8
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d005      	beq.n	8001b8c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b80:	4b53      	ldr	r3, [pc, #332]	; (8001cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	4a52      	ldr	r2, [pc, #328]	; (8001cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b86:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001b8a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b8c:	4b50      	ldr	r3, [pc, #320]	; (8001cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	494d      	ldr	r1, [pc, #308]	; (8001cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0301 	and.w	r3, r3, #1
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d040      	beq.n	8001c2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d107      	bne.n	8001bc2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bb2:	4b47      	ldr	r3, [pc, #284]	; (8001cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d115      	bne.n	8001bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e07f      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d107      	bne.n	8001bda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bca:	4b41      	ldr	r3, [pc, #260]	; (8001cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d109      	bne.n	8001bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e073      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bda:	4b3d      	ldr	r3, [pc, #244]	; (8001cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d101      	bne.n	8001bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e06b      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bea:	4b39      	ldr	r3, [pc, #228]	; (8001cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f023 0203 	bic.w	r2, r3, #3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	4936      	ldr	r1, [pc, #216]	; (8001cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bfc:	f7ff fa32 	bl	8001064 <HAL_GetTick>
 8001c00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c02:	e00a      	b.n	8001c1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c04:	f7ff fa2e 	bl	8001064 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e053      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c1a:	4b2d      	ldr	r3, [pc, #180]	; (8001cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f003 020c 	and.w	r2, r3, #12
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d1eb      	bne.n	8001c04 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c2c:	4b27      	ldr	r3, [pc, #156]	; (8001ccc <HAL_RCC_ClockConfig+0x1c0>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0307 	and.w	r3, r3, #7
 8001c34:	683a      	ldr	r2, [r7, #0]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d210      	bcs.n	8001c5c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c3a:	4b24      	ldr	r3, [pc, #144]	; (8001ccc <HAL_RCC_ClockConfig+0x1c0>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f023 0207 	bic.w	r2, r3, #7
 8001c42:	4922      	ldr	r1, [pc, #136]	; (8001ccc <HAL_RCC_ClockConfig+0x1c0>)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c4a:	4b20      	ldr	r3, [pc, #128]	; (8001ccc <HAL_RCC_ClockConfig+0x1c0>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0307 	and.w	r3, r3, #7
 8001c52:	683a      	ldr	r2, [r7, #0]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d001      	beq.n	8001c5c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e032      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0304 	and.w	r3, r3, #4
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d008      	beq.n	8001c7a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c68:	4b19      	ldr	r3, [pc, #100]	; (8001cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	4916      	ldr	r1, [pc, #88]	; (8001cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c76:	4313      	orrs	r3, r2
 8001c78:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0308 	and.w	r3, r3, #8
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d009      	beq.n	8001c9a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c86:	4b12      	ldr	r3, [pc, #72]	; (8001cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	691b      	ldr	r3, [r3, #16]
 8001c92:	00db      	lsls	r3, r3, #3
 8001c94:	490e      	ldr	r1, [pc, #56]	; (8001cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c96:	4313      	orrs	r3, r2
 8001c98:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c9a:	f000 f821 	bl	8001ce0 <HAL_RCC_GetSysClockFreq>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	4b0b      	ldr	r3, [pc, #44]	; (8001cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	091b      	lsrs	r3, r3, #4
 8001ca6:	f003 030f 	and.w	r3, r3, #15
 8001caa:	490a      	ldr	r1, [pc, #40]	; (8001cd4 <HAL_RCC_ClockConfig+0x1c8>)
 8001cac:	5ccb      	ldrb	r3, [r1, r3]
 8001cae:	fa22 f303 	lsr.w	r3, r2, r3
 8001cb2:	4a09      	ldr	r2, [pc, #36]	; (8001cd8 <HAL_RCC_ClockConfig+0x1cc>)
 8001cb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001cb6:	4b09      	ldr	r3, [pc, #36]	; (8001cdc <HAL_RCC_ClockConfig+0x1d0>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7ff f990 	bl	8000fe0 <HAL_InitTick>

  return HAL_OK;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3710      	adds	r7, #16
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	40022000 	.word	0x40022000
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	08001e34 	.word	0x08001e34
 8001cd8:	2000000c 	.word	0x2000000c
 8001cdc:	20000010 	.word	0x20000010

08001ce0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b087      	sub	sp, #28
 8001ce4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	2300      	movs	r3, #0
 8001cec:	60bb      	str	r3, [r7, #8]
 8001cee:	2300      	movs	r3, #0
 8001cf0:	617b      	str	r3, [r7, #20]
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001cfa:	4b1e      	ldr	r3, [pc, #120]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x94>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f003 030c 	and.w	r3, r3, #12
 8001d06:	2b04      	cmp	r3, #4
 8001d08:	d002      	beq.n	8001d10 <HAL_RCC_GetSysClockFreq+0x30>
 8001d0a:	2b08      	cmp	r3, #8
 8001d0c:	d003      	beq.n	8001d16 <HAL_RCC_GetSysClockFreq+0x36>
 8001d0e:	e027      	b.n	8001d60 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d10:	4b19      	ldr	r3, [pc, #100]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d12:	613b      	str	r3, [r7, #16]
      break;
 8001d14:	e027      	b.n	8001d66 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	0c9b      	lsrs	r3, r3, #18
 8001d1a:	f003 030f 	and.w	r3, r3, #15
 8001d1e:	4a17      	ldr	r2, [pc, #92]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001d20:	5cd3      	ldrb	r3, [r2, r3]
 8001d22:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d010      	beq.n	8001d50 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d2e:	4b11      	ldr	r3, [pc, #68]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x94>)
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	0c5b      	lsrs	r3, r3, #17
 8001d34:	f003 0301 	and.w	r3, r3, #1
 8001d38:	4a11      	ldr	r2, [pc, #68]	; (8001d80 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001d3a:	5cd3      	ldrb	r3, [r2, r3]
 8001d3c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a0d      	ldr	r2, [pc, #52]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d42:	fb02 f203 	mul.w	r2, r2, r3
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d4c:	617b      	str	r3, [r7, #20]
 8001d4e:	e004      	b.n	8001d5a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	4a0c      	ldr	r2, [pc, #48]	; (8001d84 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001d54:	fb02 f303 	mul.w	r3, r2, r3
 8001d58:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	613b      	str	r3, [r7, #16]
      break;
 8001d5e:	e002      	b.n	8001d66 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d60:	4b05      	ldr	r3, [pc, #20]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d62:	613b      	str	r3, [r7, #16]
      break;
 8001d64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d66:	693b      	ldr	r3, [r7, #16]
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	371c      	adds	r7, #28
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bc80      	pop	{r7}
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	40021000 	.word	0x40021000
 8001d78:	007a1200 	.word	0x007a1200
 8001d7c:	08001e44 	.word	0x08001e44
 8001d80:	08001e54 	.word	0x08001e54
 8001d84:	003d0900 	.word	0x003d0900

08001d88 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d90:	4b0a      	ldr	r3, [pc, #40]	; (8001dbc <RCC_Delay+0x34>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a0a      	ldr	r2, [pc, #40]	; (8001dc0 <RCC_Delay+0x38>)
 8001d96:	fba2 2303 	umull	r2, r3, r2, r3
 8001d9a:	0a5b      	lsrs	r3, r3, #9
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	fb02 f303 	mul.w	r3, r2, r3
 8001da2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001da4:	bf00      	nop
  }
  while (Delay --);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	1e5a      	subs	r2, r3, #1
 8001daa:	60fa      	str	r2, [r7, #12]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d1f9      	bne.n	8001da4 <RCC_Delay+0x1c>
}
 8001db0:	bf00      	nop
 8001db2:	bf00      	nop
 8001db4:	3714      	adds	r7, #20
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bc80      	pop	{r7}
 8001dba:	4770      	bx	lr
 8001dbc:	2000000c 	.word	0x2000000c
 8001dc0:	10624dd3 	.word	0x10624dd3

08001dc4 <__libc_init_array>:
 8001dc4:	b570      	push	{r4, r5, r6, lr}
 8001dc6:	2600      	movs	r6, #0
 8001dc8:	4d0c      	ldr	r5, [pc, #48]	; (8001dfc <__libc_init_array+0x38>)
 8001dca:	4c0d      	ldr	r4, [pc, #52]	; (8001e00 <__libc_init_array+0x3c>)
 8001dcc:	1b64      	subs	r4, r4, r5
 8001dce:	10a4      	asrs	r4, r4, #2
 8001dd0:	42a6      	cmp	r6, r4
 8001dd2:	d109      	bne.n	8001de8 <__libc_init_array+0x24>
 8001dd4:	f000 f822 	bl	8001e1c <_init>
 8001dd8:	2600      	movs	r6, #0
 8001dda:	4d0a      	ldr	r5, [pc, #40]	; (8001e04 <__libc_init_array+0x40>)
 8001ddc:	4c0a      	ldr	r4, [pc, #40]	; (8001e08 <__libc_init_array+0x44>)
 8001dde:	1b64      	subs	r4, r4, r5
 8001de0:	10a4      	asrs	r4, r4, #2
 8001de2:	42a6      	cmp	r6, r4
 8001de4:	d105      	bne.n	8001df2 <__libc_init_array+0x2e>
 8001de6:	bd70      	pop	{r4, r5, r6, pc}
 8001de8:	f855 3b04 	ldr.w	r3, [r5], #4
 8001dec:	4798      	blx	r3
 8001dee:	3601      	adds	r6, #1
 8001df0:	e7ee      	b.n	8001dd0 <__libc_init_array+0xc>
 8001df2:	f855 3b04 	ldr.w	r3, [r5], #4
 8001df6:	4798      	blx	r3
 8001df8:	3601      	adds	r6, #1
 8001dfa:	e7f2      	b.n	8001de2 <__libc_init_array+0x1e>
 8001dfc:	08001e58 	.word	0x08001e58
 8001e00:	08001e58 	.word	0x08001e58
 8001e04:	08001e58 	.word	0x08001e58
 8001e08:	08001e5c 	.word	0x08001e5c

08001e0c <memset>:
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	4402      	add	r2, r0
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d100      	bne.n	8001e16 <memset+0xa>
 8001e14:	4770      	bx	lr
 8001e16:	f803 1b01 	strb.w	r1, [r3], #1
 8001e1a:	e7f9      	b.n	8001e10 <memset+0x4>

08001e1c <_init>:
 8001e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e1e:	bf00      	nop
 8001e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e22:	bc08      	pop	{r3}
 8001e24:	469e      	mov	lr, r3
 8001e26:	4770      	bx	lr

08001e28 <_fini>:
 8001e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e2a:	bf00      	nop
 8001e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e2e:	bc08      	pop	{r3}
 8001e30:	469e      	mov	lr, r3
 8001e32:	4770      	bx	lr
